import { NormalizedIndex } from '@data-client/normalizr';
import { UpdateFunction, AbstractInstanceType } from '@data-client/normalizr';
import { ErrorTypes } from '@data-client/normalizr';
import { SET_TYPE } from './actionTypes.js';
import { Dispatch, Middleware, MiddlewareAPI } from './middlewareTypes.js';
import { ActionTypes, SetAction, OptimisticAction } from './newActions.js';
export { AbstractInstanceType, UpdateFunction };
export type ReceiveTypes = typeof SET_TYPE;
export type PK = string;
export interface State<T> {
    readonly entities: {
        readonly [entityKey: string]: {
            readonly [pk: string]: T;
        } | undefined;
    };
    readonly indexes: NormalizedIndex;
    readonly results: {
        readonly [key: string]: unknown | PK[] | PK | undefined;
    };
    readonly meta: {
        readonly [key: string]: {
            readonly date: number;
            readonly error?: ErrorTypes;
            readonly expiresAt: number;
            readonly prevExpiresAt?: number;
            readonly invalidated?: boolean;
            readonly errorPolicy?: 'hard' | 'soft' | undefined;
        };
    };
    readonly entityMeta: {
        readonly [entityKey: string]: {
            readonly [pk: string]: {
                readonly date: number;
                readonly expiresAt: number;
                readonly fetchedAt: number;
            };
        };
    };
    readonly optimistic: (SetAction | OptimisticAction)[];
    readonly lastReset: number;
}
import * as newActions_1 from './newActions.js';
export { newActions_1 as newActions };
export * from './newActions.js';
export interface Manager<Actions = ActionTypes> {
    getMiddleware(): Middleware<Actions>;
    cleanup(): void;
    init?: (state: State<any>) => void;
}
export { Dispatch, Middleware, MiddlewareAPI };
//# sourceMappingURL=types.d.ts.map
