import Controller from '../controller/Controller.js';
import type { Manager, Middleware, UnsubscribeAction, SubscribeAction } from '../types.js';
type Actions = UnsubscribeAction | SubscribeAction;
/** Interface handling a single resource subscription */
export interface Subscription {
    add(frequency?: number): void;
    remove(frequency?: number): boolean;
    cleanup(): void;
}
/** The static class that constructs Subscription */
export interface SubscriptionConstructable {
    new (action: Omit<SubscribeAction, 'type'>, controller: Controller): Subscription;
}
/** Handles subscription actions -> fetch or receive actions
 *
 * Constructor takes a SubscriptionConstructable class to control how
 * subscriptions are handled. (e.g., polling, websockets)
 *
 * @see https://dataclient.io/docs/api/SubscriptionManager
 */
export default class SubscriptionManager<S extends SubscriptionConstructable> implements Manager<Actions> {
    protected subscriptions: {
        [key: string]: InstanceType<S>;
    };
    protected readonly Subscription: S;
    protected middleware: Middleware;
    protected controller: Controller;
    constructor(Subscription: S);
    /** Ensures all subscriptions are cleaned up. */
    cleanup(): void;
    /** Called when middleware intercepts 'rest-hooks/subscribe' action.
     *
     */
    protected handleSubscribe(action: SubscribeAction): void;
    /** Called when middleware intercepts 'rest-hooks/unsubscribe' action.
     *
     */
    protected handleUnsubscribe(action: UnsubscribeAction): void;
    /** Attaches Manager to store
     *
     * Intercepts 'rest-hooks/subscribe'/'rest-hooks/unsubscribe' to register resources that
     * need to be kept up to date.
     *
     * Will possibly dispatch 'rest-hooks/fetch' or 'rest-hooks/receive' to keep resources fresh
     *
     */
    getMiddleware(): Middleware;
}
export {};
//# sourceMappingURL=SubscriptionManager.d.ts.map