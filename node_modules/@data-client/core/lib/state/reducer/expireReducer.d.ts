import type { State, ExpireAllAction } from '../../types.js';
export declare function expireReducer(state: State<unknown>, action: ExpireAllAction): {
    meta: {
        [x: string]: {
            readonly date: number;
            readonly error?: import("packages/normalizr/lib/index.js").ErrorTypes | undefined;
            readonly expiresAt: number;
            readonly prevExpiresAt?: number | undefined;
            readonly invalidated?: boolean | undefined;
            readonly errorPolicy?: "hard" | "soft" | undefined;
        };
    };
    entities: {
        readonly [entityKey: string]: {
            readonly [pk: string]: unknown;
        } | undefined;
    };
    indexes: import("packages/normalizr/lib/interface.js").NormalizedIndex;
    results: {
        readonly [key: string]: unknown;
    };
    entityMeta: {
        readonly [entityKey: string]: {
            readonly [pk: string]: {
                readonly date: number;
                readonly expiresAt: number;
                readonly fetchedAt: number;
            };
        };
    };
    optimistic: (import("../../newActions.js").SetAction | import("../../newActions.js").OptimisticAction<import("packages/normalizr/lib/index.js").EndpointInterface<import("packages/normalizr/lib/index.js").FetchFunction, import("packages/normalizr/lib/interface.js").Schema | undefined, boolean | undefined> & {
        update?: import("../../index.js").EndpointUpdateFunction<import("packages/normalizr/lib/index.js").EndpointInterface<import("packages/normalizr/lib/index.js").FetchFunction, import("packages/normalizr/lib/interface.js").Schema | undefined, boolean | undefined>> | undefined;
    }>)[];
    lastReset: number;
};
//# sourceMappingURL=expireReducer.d.ts.map