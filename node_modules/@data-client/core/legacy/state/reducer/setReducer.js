import { normalize } from '@data-client/normalizr';
import { OPTIMISTIC_TYPE } from '../../actionTypes.js';
export function setReducer(state, action, controller) {
  if (action.error) {
    return reduceError(state, action, action.payload);
  }
  try {
    var _state$meta$action$me;
    let payload;
    // for true receives payload is contained in action
    if (action.type === OPTIMISTIC_TYPE) {
      // this should never happen
      if (!action.endpoint.getOptimisticResponse) return state;
      try {
        // compute optimistic response based on current state
        payload = action.endpoint.getOptimisticResponse.call(action.endpoint, controller.snapshot(state, action.meta.fetchedAt), ...action.meta.args);
      } catch (e) {
        var _e$constructor;
        // AbortOptimistic means 'do nothing', otherwise we count the exception as endpoint failure
        if (((_e$constructor = e.constructor) == null ? void 0 : _e$constructor.name) === 'AbortOptimistic') {
          return state;
        }
        throw e;
      }
    } else {
      payload = action.payload;
    }
    const {
      result,
      entities,
      indexes,
      entityMeta
    } = normalize(payload, action.endpoint.schema, action.meta.args, state.entities, state.indexes, state.entityMeta, action.meta);
    const results = Object.assign({}, state.results, {
      [action.meta.key]: result
    });
    try {
      if (action.endpoint.update) {
        const updaters = action.endpoint.update(result, ...action.meta.args);
        Object.keys(updaters).forEach(key => {
          results[key] = updaters[key](results[key]);
        });
      }
      // no reason to completely fail because of user-code error
      // integrity of this state update is still guaranteed
    } catch (error) {
      console.error(`The following error occured during Endpoint.update() for ${action.meta.key}`);
      console.error(error);
    }
    return {
      entities,
      indexes,
      results,
      entityMeta,
      meta: Object.assign({}, state.meta, {
        [action.meta.key]: {
          date: action.meta.date,
          expiresAt: action.meta.expiresAt,
          prevExpiresAt: (_state$meta$action$me = state.meta[action.meta.key]) == null ? void 0 : _state$meta$action$me.expiresAt
        }
      }),
      optimistic: filterOptimistic(state, action),
      lastReset: state.lastReset
    };
    // reducer must update the state, so in case of processing errors we simply compute the results inline
  } catch (error) {
    if (typeof error === 'object') {
      error.message = `Error processing ${action.meta.key}\n\nFull Schema: ${JSON.stringify(action.endpoint.schema, undefined, 2)}\n\nError:\n${error.message}`;
      if ('payload' in action) error.payload = action.payload;
      error.status = 400;
    }

    // this is not always bubbled up, so let's double sure this doesn't fail silently
    /* istanbul ignore else */
    if (process.env.NODE_ENV !== 'production') {
      console.error(error);
    }
    return reduceError(state, action, error);
  }
}
function reduceError(state, action, error) {
  if (error.name === 'AbortError') {
    // In case we abort simply undo the optimistic update and act like no fetch even occured
    // We still want those watching promises from fetch directly to observed the abort, but we don't want to
    // Trigger errors in this case. This means theoretically improperly built abortes useResource() could suspend forever.
    return Object.assign({}, state, {
      optimistic: filterOptimistic(state, action)
    });
  }
  return Object.assign({}, state, {
    meta: Object.assign({}, state.meta, {
      [action.meta.key]: {
        date: action.meta.date,
        error,
        expiresAt: action.meta.expiresAt,
        errorPolicy: action.endpoint.errorPolicy == null ? void 0 : action.endpoint.errorPolicy(error)
      }
    }),
    optimistic: filterOptimistic(state, action)
  });
}
/** Filter all requests with same serialization that did not start after the resolving request */
function filterOptimistic(state, resolvingAction) {
  return state.optimistic.filter(optimisticAction => optimisticAction.meta.key !== resolvingAction.meta.key || (optimisticAction.type === OPTIMISTIC_TYPE ? optimisticAction.meta.fetchedAt !== resolvingAction.meta.fetchedAt : optimisticAction.meta.date > resolvingAction.meta.date));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,