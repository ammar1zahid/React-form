var _globalThis$document;
import createReducer from '../state/reducer/createReducer.js';
const HASINTL = typeof Intl !== 'undefined';
const DEFAULT_CONFIG = {
  name: `Rest Hooks: ${(_globalThis$document = globalThis.document) == null ? void 0 : _globalThis$document.title}`,
  autoPause: true,
  serialize: {
    options: undefined,
    /* istanbul ignore next */
    replacer: HASINTL ? (key, value) => {
      if (typeof value === 'number' && typeof key === 'string' && isFinite(value) && (key === 'date' || key.endsWith('At'))) {
        return Intl.DateTimeFormat('en-US', {
          hour: 'numeric',
          minute: 'numeric',
          second: 'numeric',
          fractionalSecondDigits: 3
        }).format(value);
      }
      return value;
    } : undefined
  }
};

/** Integrates with https://github.com/reduxjs/redux-devtools
 *
 * Options: https://github.com/reduxjs/redux-devtools/blob/main/extension/docs/API/Arguments.md
 *
 * @see https://dataclient.io/docs/api/DevToolsManager
 */
export default class DevToolsManager {
  constructor(config, skipLogging) {
    /* istanbul ignore next */
    this.devTools = typeof window !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__.connect(Object.assign({}, DEFAULT_CONFIG, {
      config
    }));

    /* istanbul ignore if */
    /* istanbul ignore next */
    if (this.devTools) {
      this.middleware = controller => {
        const reducer = createReducer(controller);
        return next => action => {
          const ret = next(action);
          ret.then(() => {
            if (skipLogging != null && skipLogging(action)) return;
            const state = controller.getState();
            this.devTools.send(action, state.optimistic.reduce(reducer, state), undefined, 'REST_HOOKS');
          });
          return ret;
        };
      };
    } else {
      this.middleware = () => next => action => next(action);
    }
  }

  /** Called when initial state is ready */
  init(state) {
    /* istanbul ignore if */
    if (this.devTools) this.devTools.init(state);
  }

  /** Ensures all subscriptions are cleaned up. */
  cleanup() {}

  /** Attaches Manager to store
   *
   */
  getMiddleware() {
    return this.middleware;
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjcmVhdGVSZWR1Y2VyIiwiSEFTSU5UTCIsIkludGwiLCJERUZBVUxUX0NPTkZJRyIsIm5hbWUiLCJfZ2xvYmFsVGhpcyRkb2N1bWVudCIsImdsb2JhbFRoaXMiLCJkb2N1bWVudCIsInRpdGxlIiwiYXV0b1BhdXNlIiwic2VyaWFsaXplIiwib3B0aW9ucyIsInVuZGVmaW5lZCIsInJlcGxhY2VyIiwia2V5IiwidmFsdWUiLCJpc0Zpbml0ZSIsImVuZHNXaXRoIiwiRGF0ZVRpbWVGb3JtYXQiLCJob3VyIiwibWludXRlIiwic2Vjb25kIiwiZnJhY3Rpb25hbFNlY29uZERpZ2l0cyIsImZvcm1hdCIsIkRldlRvb2xzTWFuYWdlciIsImNvbnN0cnVjdG9yIiwiY29uZmlnIiwic2tpcExvZ2dpbmciLCJkZXZUb29scyIsIndpbmRvdyIsIl9fUkVEVVhfREVWVE9PTFNfRVhURU5TSU9OX18iLCJjb25uZWN0IiwiT2JqZWN0IiwiYXNzaWduIiwibWlkZGxld2FyZSIsImNvbnRyb2xsZXIiLCJyZWR1Y2VyIiwibmV4dCIsImFjdGlvbiIsInJldCIsInRoZW4iLCJzdGF0ZSIsImdldFN0YXRlIiwic2VuZCIsIm9wdGltaXN0aWMiLCJyZWR1Y2UiLCJpbml0IiwiY2xlYW51cCIsImdldE1pZGRsZXdhcmUiXSwic291cmNlcyI6WyIuLi8uLi9zcmMvbWFuYWdlci9EZXZ0b29sc01hbmFnZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBEZXZUb29sc0NvbmZpZyB9IGZyb20gJy4vZGV2dG9vbHNUeXBlcy5qcyc7XG5pbXBvcnQgdHlwZSB7IE1pZGRsZXdhcmUgfSBmcm9tICcuL0xvZ291dE1hbmFnZXIuanMnO1xuaW1wb3J0IGNyZWF0ZVJlZHVjZXIgZnJvbSAnLi4vc3RhdGUvcmVkdWNlci9jcmVhdGVSZWR1Y2VyLmpzJztcbmltcG9ydCB0eXBlIHsgTWFuYWdlciwgU3RhdGUsIEFjdGlvblR5cGVzIH0gZnJvbSAnLi4vdHlwZXMuanMnO1xuXG5leHBvcnQgdHlwZSB7IERldlRvb2xzQ29uZmlnIH07XG5cbmNvbnN0IEhBU0lOVEwgPSB0eXBlb2YgSW50bCAhPT0gJ3VuZGVmaW5lZCc7XG5jb25zdCBERUZBVUxUX0NPTkZJRyA9IHtcbiAgbmFtZTogYFJlc3QgSG9va3M6ICR7Z2xvYmFsVGhpcy5kb2N1bWVudD8udGl0bGV9YCxcbiAgYXV0b1BhdXNlOiB0cnVlLFxuICBzZXJpYWxpemU6IHtcbiAgICBvcHRpb25zOiB1bmRlZmluZWQsXG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICByZXBsYWNlcjogSEFTSU5UTFxuICAgICAgPyAoa2V5OiBzdHJpbmcgfCBudW1iZXIgfCBzeW1ib2wsIHZhbHVlOiB1bmtub3duKSA9PiB7XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyAmJlxuICAgICAgICAgICAgdHlwZW9mIGtleSA9PT0gJ3N0cmluZycgJiZcbiAgICAgICAgICAgIGlzRmluaXRlKHZhbHVlKSAmJlxuICAgICAgICAgICAgKGtleSA9PT0gJ2RhdGUnIHx8IGtleS5lbmRzV2l0aCgnQXQnKSlcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIHJldHVybiBJbnRsLkRhdGVUaW1lRm9ybWF0KCdlbi1VUycsIHtcbiAgICAgICAgICAgICAgaG91cjogJ251bWVyaWMnLFxuICAgICAgICAgICAgICBtaW51dGU6ICdudW1lcmljJyxcbiAgICAgICAgICAgICAgc2Vjb25kOiAnbnVtZXJpYycsXG4gICAgICAgICAgICAgIGZyYWN0aW9uYWxTZWNvbmREaWdpdHM6IDMsXG4gICAgICAgICAgICB9KS5mb3JtYXQodmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIDogdW5kZWZpbmVkLFxuICB9LFxufTtcblxuLyoqIEludGVncmF0ZXMgd2l0aCBodHRwczovL2dpdGh1Yi5jb20vcmVkdXhqcy9yZWR1eC1kZXZ0b29sc1xuICpcbiAqIE9wdGlvbnM6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWR1eGpzL3JlZHV4LWRldnRvb2xzL2Jsb2IvbWFpbi9leHRlbnNpb24vZG9jcy9BUEkvQXJndW1lbnRzLm1kXG4gKlxuICogQHNlZSBodHRwczovL2RhdGFjbGllbnQuaW8vZG9jcy9hcGkvRGV2VG9vbHNNYW5hZ2VyXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIERldlRvb2xzTWFuYWdlciBpbXBsZW1lbnRzIE1hbmFnZXIge1xuICBwcm90ZWN0ZWQgZGVjbGFyZSBtaWRkbGV3YXJlOiBNaWRkbGV3YXJlO1xuICBwcm90ZWN0ZWQgZGVjbGFyZSBkZXZUb29sczogdW5kZWZpbmVkIHwgYW55O1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIGNvbmZpZz86IERldlRvb2xzQ29uZmlnLFxuICAgIHNraXBMb2dnaW5nPzogKGFjdGlvbjogQWN0aW9uVHlwZXMpID0+IGJvb2xlYW4sXG4gICkge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgdGhpcy5kZXZUb29scyA9XG4gICAgICB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgKHdpbmRvdyBhcyBhbnkpLl9fUkVEVVhfREVWVE9PTFNfRVhURU5TSU9OX18gJiZcbiAgICAgICh3aW5kb3cgYXMgYW55KS5fX1JFRFVYX0RFVlRPT0xTX0VYVEVOU0lPTl9fLmNvbm5lY3Qoe1xuICAgICAgICAuLi5ERUZBVUxUX0NPTkZJRyxcbiAgICAgICAgY29uZmlnLFxuICAgICAgfSk7XG5cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIGlmICh0aGlzLmRldlRvb2xzKSB7XG4gICAgICB0aGlzLm1pZGRsZXdhcmUgPSBjb250cm9sbGVyID0+IHtcbiAgICAgICAgY29uc3QgcmVkdWNlciA9IGNyZWF0ZVJlZHVjZXIoY29udHJvbGxlciBhcyBhbnkpO1xuICAgICAgICByZXR1cm4gbmV4dCA9PiBhY3Rpb24gPT4ge1xuICAgICAgICAgIGNvbnN0IHJldCA9IG5leHQoYWN0aW9uKTtcbiAgICAgICAgICByZXQudGhlbigoKSA9PiB7XG4gICAgICAgICAgICBpZiAoc2tpcExvZ2dpbmc/LihhY3Rpb24pKSByZXR1cm47XG4gICAgICAgICAgICBjb25zdCBzdGF0ZSA9IGNvbnRyb2xsZXIuZ2V0U3RhdGUoKTtcbiAgICAgICAgICAgIHRoaXMuZGV2VG9vbHMuc2VuZChcbiAgICAgICAgICAgICAgYWN0aW9uLFxuICAgICAgICAgICAgICBzdGF0ZS5vcHRpbWlzdGljLnJlZHVjZShyZWR1Y2VyLCBzdGF0ZSksXG4gICAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgJ1JFU1RfSE9PS1MnLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgICB9O1xuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5taWRkbGV3YXJlID0gKCkgPT4gbmV4dCA9PiBhY3Rpb24gPT4gbmV4dChhY3Rpb24pO1xuICAgIH1cbiAgfVxuXG4gIC8qKiBDYWxsZWQgd2hlbiBpbml0aWFsIHN0YXRlIGlzIHJlYWR5ICovXG4gIGluaXQoc3RhdGU6IFN0YXRlPGFueT4pIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAodGhpcy5kZXZUb29scykgdGhpcy5kZXZUb29scy5pbml0KHN0YXRlKTtcbiAgfVxuXG4gIC8qKiBFbnN1cmVzIGFsbCBzdWJzY3JpcHRpb25zIGFyZSBjbGVhbmVkIHVwLiAqL1xuICBjbGVhbnVwKCkge31cblxuICAvKiogQXR0YWNoZXMgTWFuYWdlciB0byBzdG9yZVxuICAgKlxuICAgKi9cbiAgZ2V0TWlkZGxld2FyZSgpIHtcbiAgICByZXR1cm4gdGhpcy5taWRkbGV3YXJlO1xuICB9XG59XG4iXSwibWFwcGluZ3MiOiI7QUFFQSxPQUFPQSxhQUFhLE1BQU0sbUNBQW1DO0FBSzdELE1BQU1DLE9BQU8sR0FBRyxPQUFPQyxJQUFJLEtBQUssV0FBVztBQUMzQyxNQUFNQyxjQUFjLEdBQUc7RUFDckJDLElBQUksRUFBRyxlQUFZLENBQUFDLG9CQUFBLEdBQUVDLFVBQVUsQ0FBQ0MsUUFBUSxxQkFBbkJGLG9CQUFBLENBQXFCRyxLQUFNLEVBQUM7RUFDakRDLFNBQVMsRUFBRSxJQUFJO0VBQ2ZDLFNBQVMsRUFBRTtJQUNUQyxPQUFPLEVBQUVDLFNBQVM7SUFDbEI7SUFDQUMsUUFBUSxFQUFFWixPQUFPLEdBQ2IsQ0FBQ2EsR0FBNkIsRUFBRUMsS0FBYyxLQUFLO01BQ2pELElBQ0UsT0FBT0EsS0FBSyxLQUFLLFFBQVEsSUFDekIsT0FBT0QsR0FBRyxLQUFLLFFBQVEsSUFDdkJFLFFBQVEsQ0FBQ0QsS0FBSyxDQUFDLEtBQ2RELEdBQUcsS0FBSyxNQUFNLElBQUlBLEdBQUcsQ0FBQ0csUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQ3RDO1FBQ0EsT0FBT2YsSUFBSSxDQUFDZ0IsY0FBYyxDQUFDLE9BQU8sRUFBRTtVQUNsQ0MsSUFBSSxFQUFFLFNBQVM7VUFDZkMsTUFBTSxFQUFFLFNBQVM7VUFDakJDLE1BQU0sRUFBRSxTQUFTO1VBQ2pCQyxzQkFBc0IsRUFBRTtRQUMxQixDQUFDLENBQUMsQ0FBQ0MsTUFBTSxDQUFDUixLQUFLLENBQUM7TUFDbEI7TUFDQSxPQUFPQSxLQUFLO0lBQ2QsQ0FBQyxHQUNESDtFQUNOO0FBQ0YsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLE1BQU1ZLGVBQWUsQ0FBb0I7RUFJdERDLFdBQVdBLENBQ1RDLE1BQXVCLEVBQ3ZCQyxXQUE4QyxFQUM5QztJQUNBO0lBQ0EsSUFBSSxDQUFDQyxRQUFRLEdBQ1gsT0FBT0MsTUFBTSxLQUFLLFdBQVcsSUFDNUJBLE1BQU0sQ0FBU0MsNEJBQTRCLElBQzNDRCxNQUFNLENBQVNDLDRCQUE0QixDQUFDQyxPQUFPLENBQUFDLE1BQUEsQ0FBQUMsTUFBQSxLQUMvQzlCLGNBQWM7TUFDakJ1QjtJQUFNLEVBQ1AsQ0FBQzs7SUFFSjtJQUNBO0lBQ0EsSUFBSSxJQUFJLENBQUNFLFFBQVEsRUFBRTtNQUNqQixJQUFJLENBQUNNLFVBQVUsR0FBR0MsVUFBVSxJQUFJO1FBQzlCLE1BQU1DLE9BQU8sR0FBR3BDLGFBQWEsQ0FBQ21DLFVBQWlCLENBQUM7UUFDaEQsT0FBT0UsSUFBSSxJQUFJQyxNQUFNLElBQUk7VUFDdkIsTUFBTUMsR0FBRyxHQUFHRixJQUFJLENBQUNDLE1BQU0sQ0FBQztVQUN4QkMsR0FBRyxDQUFDQyxJQUFJLENBQUMsTUFBTTtZQUNiLElBQUliLFdBQVcsWUFBWEEsV0FBVyxDQUFHVyxNQUFNLENBQUMsRUFBRTtZQUMzQixNQUFNRyxLQUFLLEdBQUdOLFVBQVUsQ0FBQ08sUUFBUSxDQUFDLENBQUM7WUFDbkMsSUFBSSxDQUFDZCxRQUFRLENBQUNlLElBQUksQ0FDaEJMLE1BQU0sRUFDTkcsS0FBSyxDQUFDRyxVQUFVLENBQUNDLE1BQU0sQ0FBQ1QsT0FBTyxFQUFFSyxLQUFLLENBQUMsRUFDdkM3QixTQUFTLEVBQ1QsWUFDRixDQUFDO1VBQ0gsQ0FBQyxDQUFDO1VBQ0YsT0FBTzJCLEdBQUc7UUFDWixDQUFDO01BQ0gsQ0FBQztJQUNILENBQUMsTUFBTTtNQUNMLElBQUksQ0FBQ0wsVUFBVSxHQUFHLE1BQU1HLElBQUksSUFBSUMsTUFBTSxJQUFJRCxJQUFJLENBQUNDLE1BQU0sQ0FBQztJQUN4RDtFQUNGOztFQUVBO0VBQ0FRLElBQUlBLENBQUNMLEtBQWlCLEVBQUU7SUFDdEI7SUFDQSxJQUFJLElBQUksQ0FBQ2IsUUFBUSxFQUFFLElBQUksQ0FBQ0EsUUFBUSxDQUFDa0IsSUFBSSxDQUFDTCxLQUFLLENBQUM7RUFDOUM7O0VBRUE7RUFDQU0sT0FBT0EsQ0FBQSxFQUFHLENBQUM7O0VBRVg7QUFDRjtBQUNBO0VBQ0VDLGFBQWFBLENBQUEsRUFBRztJQUNkLE9BQU8sSUFBSSxDQUFDZCxVQUFVO0VBQ3hCO0FBQ0YifQ==