import { Path } from './types.js';
/** Maps entity dependencies to a value (usually their denormalized form)
 *
 * Dependencies store `Path` to enable quick traversal using only `State`
 * If *any* members of the dependency get cleaned up, so does that key/value pair get removed.
 */
export default class WeakEntityMap<K extends object = object, V = any> {
    readonly next: WeakMap<K, Link<K, V>>;
    nextPath: Path | undefined;
    get(entity: K, getEntity: GetEntity<K | symbol>): readonly [
        undefined,
        undefined
    ] | [
        V,
        Path[]
    ];
    set(dependencies: Dep<K>[], value: V): void;
}
export declare function getEntities<K extends object>(state: State<K>): GetEntity<K>;
export declare function depToPaths(dependencies: Dep[]): Path[];
export type GetEntity<K = object | symbol> = (lookup: Path) => K;
/** Link in a chain */
declare class Link<K extends object, V> {
    next: WeakMap<K, Link<K, V>>;
    value: V | undefined;
    journey: Path[];
    nextPath: Path | undefined;
}
export interface Dep<K = object> {
    path: Path;
    entity: K;
}
type State<K extends object> = Record<string, Record<string, K>> | {
    getIn(path: [
        string,
        string
    ]): K;
};
export {};
//# sourceMappingURL=WeakEntityMap.d.ts.map
