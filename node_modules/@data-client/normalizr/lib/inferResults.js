import { isEntity } from './isEntity.js';
import { infer as arrayInfer } from './schemas/Array.js';
import { infer as objectInfer } from './schemas/Object.js';
/**
 * Build the result parameter to denormalize from schema alone.
 * Tries to compute the entity ids from params.
 */
export default function inferResults(schema, args, indexes, entities) {
  // schema classes
  if (canInfer(schema)) {
    var _entities$schema$key;
    const ret = schema.infer(args, indexes, inferResults, entities);
    // TODO(breaking): back compatibility with endpoint@3.7 and less
    if (isEntity(schema) && ret !== undefined && !((_entities$schema$key = entities[schema.key]) != null && _entities$schema$key[ret])) {
      return undefined;
    }
    return ret;
  }

  // plain case
  if (typeof schema === 'object' && schema) {
    const method = Array.isArray(schema) ? arrayInfer : objectInfer;
    return method(schema, args, indexes, inferResults, entities);
  }

  // fallback for things like null or undefined
  return schema;
}
function canInfer(schema) {
  return !!schema && typeof schema.infer === 'function';
}

// this only works if entity does a lookup first to see if its entity is 'found'
export function validateInference(results) {
  if (results === undefined) return false;
  if (results && typeof results === 'object' && !Array.isArray(results)) {
    return Object.values(results).every(validateInference);
  }
  return true;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJpc0VudGl0eSIsImluZmVyIiwiYXJyYXlJbmZlciIsIm9iamVjdEluZmVyIiwiaW5mZXJSZXN1bHRzIiwic2NoZW1hIiwiYXJncyIsImluZGV4ZXMiLCJlbnRpdGllcyIsImNhbkluZmVyIiwiX2VudGl0aWVzJHNjaGVtYSRrZXkiLCJyZXQiLCJ1bmRlZmluZWQiLCJrZXkiLCJtZXRob2QiLCJBcnJheSIsImlzQXJyYXkiLCJ2YWxpZGF0ZUluZmVyZW5jZSIsInJlc3VsdHMiLCJPYmplY3QiLCJ2YWx1ZXMiLCJldmVyeSJdLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmZlclJlc3VsdHMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUge1xuICBTY2hlbWEsXG4gIFNjaGVtYVNpbXBsZSxcbiAgTm9ybWFsaXplZEluZGV4LFxuICBFbnRpdHlUYWJsZSxcbn0gZnJvbSAnLi9pbnRlcmZhY2UuanMnO1xuaW1wb3J0IHsgaXNFbnRpdHkgfSBmcm9tICcuL2lzRW50aXR5LmpzJztcbmltcG9ydCB7IGluZmVyIGFzIGFycmF5SW5mZXIgfSBmcm9tICcuL3NjaGVtYXMvQXJyYXkuanMnO1xuaW1wb3J0IHsgaW5mZXIgYXMgb2JqZWN0SW5mZXIgfSBmcm9tICcuL3NjaGVtYXMvT2JqZWN0LmpzJztcbmltcG9ydCB0eXBlIHsgTm9ybWFsaXplTnVsbGFibGUgfSBmcm9tICcuL3R5cGVzLmpzJztcblxuLyoqXG4gKiBCdWlsZCB0aGUgcmVzdWx0IHBhcmFtZXRlciB0byBkZW5vcm1hbGl6ZSBmcm9tIHNjaGVtYSBhbG9uZS5cbiAqIFRyaWVzIHRvIGNvbXB1dGUgdGhlIGVudGl0eSBpZHMgZnJvbSBwYXJhbXMuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGluZmVyUmVzdWx0czxTIGV4dGVuZHMgU2NoZW1hPihcbiAgc2NoZW1hOiBTLFxuICBhcmdzOiBhbnlbXSxcbiAgaW5kZXhlczogTm9ybWFsaXplZEluZGV4LFxuICBlbnRpdGllczogRW50aXR5VGFibGUsXG4pOiBOb3JtYWxpemVOdWxsYWJsZTxTPiB7XG4gIC8vIHNjaGVtYSBjbGFzc2VzXG4gIGlmIChjYW5JbmZlcihzY2hlbWEpKSB7XG4gICAgY29uc3QgcmV0ID0gc2NoZW1hLmluZmVyKGFyZ3MsIGluZGV4ZXMsIGluZmVyUmVzdWx0cywgZW50aXRpZXMpO1xuICAgIC8vIFRPRE8oYnJlYWtpbmcpOiBiYWNrIGNvbXBhdGliaWxpdHkgd2l0aCBlbmRwb2ludEAzLjcgYW5kIGxlc3NcbiAgICBpZiAoaXNFbnRpdHkoc2NoZW1hKSAmJiByZXQgIT09IHVuZGVmaW5lZCAmJiAhZW50aXRpZXNbc2NoZW1hLmtleV0/LltyZXRdKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkIGFzIGFueTtcbiAgICB9XG4gICAgcmV0dXJuIHJldDtcbiAgfVxuXG4gIC8vIHBsYWluIGNhc2VcbiAgaWYgKHR5cGVvZiBzY2hlbWEgPT09ICdvYmplY3QnICYmIHNjaGVtYSkge1xuICAgIGNvbnN0IG1ldGhvZCA9IEFycmF5LmlzQXJyYXkoc2NoZW1hKSA/IGFycmF5SW5mZXIgOiBvYmplY3RJbmZlcjtcbiAgICByZXR1cm4gbWV0aG9kKHNjaGVtYSwgYXJncywgaW5kZXhlcywgaW5mZXJSZXN1bHRzLCBlbnRpdGllcyk7XG4gIH1cblxuICAvLyBmYWxsYmFjayBmb3IgdGhpbmdzIGxpa2UgbnVsbCBvciB1bmRlZmluZWRcbiAgcmV0dXJuIHNjaGVtYSBhcyBhbnk7XG59XG5cbmZ1bmN0aW9uIGNhbkluZmVyKHNjaGVtYTogU2NoZW1hKTogc2NoZW1hIGlzIFBpY2s8U2NoZW1hU2ltcGxlLCAnaW5mZXInPiB7XG4gIHJldHVybiAhIXNjaGVtYSAmJiB0eXBlb2YgKHNjaGVtYSBhcyBhbnkpLmluZmVyID09PSAnZnVuY3Rpb24nO1xufVxuXG4vLyB0aGlzIG9ubHkgd29ya3MgaWYgZW50aXR5IGRvZXMgYSBsb29rdXAgZmlyc3QgdG8gc2VlIGlmIGl0cyBlbnRpdHkgaXMgJ2ZvdW5kJ1xuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlSW5mZXJlbmNlKHJlc3VsdHM6IHVua25vd24pIHtcbiAgaWYgKHJlc3VsdHMgPT09IHVuZGVmaW5lZCkgcmV0dXJuIGZhbHNlO1xuICBpZiAocmVzdWx0cyAmJiB0eXBlb2YgcmVzdWx0cyA9PT0gJ29iamVjdCcgJiYgIUFycmF5LmlzQXJyYXkocmVzdWx0cykpIHtcbiAgICByZXR1cm4gT2JqZWN0LnZhbHVlcyhyZXN1bHRzKS5ldmVyeSh2YWxpZGF0ZUluZmVyZW5jZSk7XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59XG4iXSwibWFwcGluZ3MiOiJBQU1BLFNBQVNBLFFBQVEsUUFBUSxlQUFlO0FBQ3hDLFNBQVNDLEtBQUssSUFBSUMsVUFBVSxRQUFRLG9CQUFvQjtBQUN4RCxTQUFTRCxLQUFLLElBQUlFLFdBQVcsUUFBUSxxQkFBcUI7QUFHMUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLFNBQVNDLFlBQVlBLENBQ2xDQyxNQUFTLEVBQ1RDLElBQVcsRUFDWEMsT0FBd0IsRUFDeEJDLFFBQXFCLEVBQ0M7RUFDdEI7RUFDQSxJQUFJQyxRQUFRLENBQUNKLE1BQU0sQ0FBQyxFQUFFO0lBQUEsSUFBQUssb0JBQUE7SUFDcEIsTUFBTUMsR0FBRyxHQUFHTixNQUFNLENBQUNKLEtBQUssQ0FBQ0ssSUFBSSxFQUFFQyxPQUFPLEVBQUVILFlBQVksRUFBRUksUUFBUSxDQUFDO0lBQy9EO0lBQ0EsSUFBSVIsUUFBUSxDQUFDSyxNQUFNLENBQUMsSUFBSU0sR0FBRyxLQUFLQyxTQUFTLElBQUksR0FBQUYsb0JBQUEsR0FBQ0YsUUFBUSxDQUFDSCxNQUFNLENBQUNRLEdBQUcsQ0FBQyxhQUFwQkgsb0JBQUEsQ0FBdUJDLEdBQUcsQ0FBQyxHQUFFO01BQ3pFLE9BQU9DLFNBQVM7SUFDbEI7SUFDQSxPQUFPRCxHQUFHO0VBQ1o7O0VBRUE7RUFDQSxJQUFJLE9BQU9OLE1BQU0sS0FBSyxRQUFRLElBQUlBLE1BQU0sRUFBRTtJQUN4QyxNQUFNUyxNQUFNLEdBQUdDLEtBQUssQ0FBQ0MsT0FBTyxDQUFDWCxNQUFNLENBQUMsR0FBR0gsVUFBVSxHQUFHQyxXQUFXO0lBQy9ELE9BQU9XLE1BQU0sQ0FBQ1QsTUFBTSxFQUFFQyxJQUFJLEVBQUVDLE9BQU8sRUFBRUgsWUFBWSxFQUFFSSxRQUFRLENBQUM7RUFDOUQ7O0VBRUE7RUFDQSxPQUFPSCxNQUFNO0FBQ2Y7QUFFQSxTQUFTSSxRQUFRQSxDQUFDSixNQUFjLEVBQXlDO0VBQ3ZFLE9BQU8sQ0FBQyxDQUFDQSxNQUFNLElBQUksT0FBUUEsTUFBTSxDQUFTSixLQUFLLEtBQUssVUFBVTtBQUNoRTs7QUFFQTtBQUNBLE9BQU8sU0FBU2dCLGlCQUFpQkEsQ0FBQ0MsT0FBZ0IsRUFBRTtFQUNsRCxJQUFJQSxPQUFPLEtBQUtOLFNBQVMsRUFBRSxPQUFPLEtBQUs7RUFDdkMsSUFBSU0sT0FBTyxJQUFJLE9BQU9BLE9BQU8sS0FBSyxRQUFRLElBQUksQ0FBQ0gsS0FBSyxDQUFDQyxPQUFPLENBQUNFLE9BQU8sQ0FBQyxFQUFFO0lBQ3JFLE9BQU9DLE1BQU0sQ0FBQ0MsTUFBTSxDQUFDRixPQUFPLENBQUMsQ0FBQ0csS0FBSyxDQUFDSixpQkFBaUIsQ0FBQztFQUN4RDtFQUNBLE9BQU8sSUFBSTtBQUNiIn0=