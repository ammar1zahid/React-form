import type Cache from './cache.js';
import type { EntityInterface } from '../interface.js';
import type { DenormalizeCache, Path } from '../types.js';
import { type GetEntity } from '../WeakEntityMap.js';
export default class GlobalCache implements Cache {
    private dependencies;
    private cycleCache;
    private cycleIndex;
    private localCache;
    private getCache;
    private _getEntity;
    private resultCache;
    constructor(getEntity: GetEntity, entityCache: DenormalizeCache['entities'], resultCache: DenormalizeCache['results'][string]);
    getEntity(pk: string, schema: EntityInterface, entity: any, computeValue: (localCacheKey: Record<string, any>) => void): object | undefined | symbol;
    private getCacheKey;
    getResults(input: any, cachable: boolean, computeValue: () => any): {
        data: any;
        paths: Path[];
    };
    protected paths(): Path[];
}
//# sourceMappingURL=globalCache.d.ts.map