import { INVALID } from './symbol.js';
import { isEntity } from '../isEntity.js';
import { denormalize as arrayDenormalize } from '../schemas/Array.js';
import { isImmutable } from '../schemas/ImmutableUtils.js';
import { denormalize as objectDenormalize } from '../schemas/Object.js';
function unvisitEntity(entityOrId, schema, args, unvisit, getEntity, cache) {
  const entity = typeof entityOrId === 'object' ? entityOrId : getEntity({
    key: schema.key,
    pk: entityOrId
  });
  if (typeof entity === 'symbol') {
    if (typeof schema.denormalizeOnly === 'function') {
      return schema.denormalizeOnly(entity, args, unvisit);
      // TODO(breaking): Change to this as breaking change once we only support newer entities
    } else if (entity.toString().includes('DELETED')) {
      return INVALID;
    }
  }
  if (typeof entity !== 'object' || entity === null) {
    return entity;
  }
  const pk =
  // normalize must always place a string, because pk() return value is string | undefined
  // therefore no need to check for numbers
  typeof entityOrId === 'string' ? entityOrId : schema.pk(isImmutable(entity) ? entity.toJS() : entity, undefined, undefined, args);

  // if we can't generate a working pk we cannot do cache lookups properly,
  // so simply denormalize without caching
  if (pk === undefined || pk === '' || pk === 'undefined') {
    return noCacheGetEntity(localCacheKey => unvisitEntityObject(entity, schema, unvisit, '', localCacheKey, args));
  }

  // last function computes if it is not in any caches
  return cache.getEntity(pk, schema, entity, localCacheKey => unvisitEntityObject(entity, schema, unvisit, pk, localCacheKey, args));
}
function noCacheGetEntity(computeValue) {
  const localCacheKey = {};
  computeValue(localCacheKey);
  return localCacheKey[''];
}
function unvisitEntityObject(entity, schema, unvisit, pk, localCacheKey, args) {
  let entityCopy, _, deleted;
  /* istanbul ignore else */
  if (schema.createIfValid) {
    entityCopy = localCacheKey[pk] = isImmutable(entity) ? schema.createIfValid(entity.toObject()) : schema.createIfValid(entity);
    // TODO(breaking): remove once old verions no longer supported
  } /* istanbul ignore next */else {
    entityCopy = entity;
    unvisit = withTrackedEntities(unvisit);
    unvisit.setLocal = entityCopy => localCacheKey[pk] = entityCopy;
  }
  if (entityCopy === undefined) {
    // undefined indicates we should suspense (perhaps failed validation)
    localCacheKey[pk] = INVALID;
  } else {
    if (typeof schema.denormalizeOnly === 'function') {
      localCacheKey[pk] = schema.denormalizeOnly(entityCopy, args, unvisit);
    } else {
      [localCacheKey[pk], _, deleted] = schema.denormalize(entityCopy, unvisit);
      if (deleted) localCacheKey[pk] = INVALID;
    }
  }
}

// TODO(breaking): remove once unused
/* istanbul ignore next */
function withTrackedEntities(unvisit) {
  // every time we nest, we want to unwrap back to the top.
  // this is due to only needed the next level of nested entities for lookup
  const originalUnvisit = unvisit.og || unvisit;
  const wrappedUnvisit = (input, schema) => originalUnvisit(input, schema);
  wrappedUnvisit.og = unvisit;
  return wrappedUnvisit;
}
const getUnvisit = (getEntity, cache, args) => {
  // TODO(breaking): This handles legacy schemas from 3.7 and below
  const unvisitAdapter = getUnvisitAdapter(unvisit);
  function unvisit(input, schema) {
    if (!schema) return input;
    if (input === null) {
      return input;
    }
    const hasDenormalize = typeof schema.denormalize === 'function' || typeof schema.denormalizeOnly === 'function';

    // deserialize fields (like Date)
    if (!hasDenormalize && typeof schema === 'function') {
      if (input instanceof schema) return input;
      if (input === undefined) return input;
      return new schema(input);
    }
    if (input === undefined) {
      var _schema$constructor;
      // TODO(breaking): Drop support for initial All version
      const isAll = ((_schema$constructor = schema.constructor) == null ? void 0 : _schema$constructor.name) === 'AllSchema';
      return isAll ? INVALID : undefined;
    }
    if (!hasDenormalize && typeof schema === 'object') {
      const method = Array.isArray(schema) ? arrayDenormalize : objectDenormalize;
      return method(schema, input, args, unvisit);
    }
    if (isEntity(schema)) {
      return unvisitEntity(input, schema, args, schema.denormalizeOnly ? unvisit : unvisitAdapter, getEntity, cache);
    }
    if (hasDenormalize) {
      if (schema.denormalizeOnly) {
        return schema.denormalizeOnly(input, args, unvisit);
      } else {
        return denormalizeLegacySchema(schema, input, unvisitAdapter);
      }
    }
    return input;
  }
  return (input, schema) => {
    // in the case where WeakMap cannot be used
    // this test ensures null is properly excluded from WeakMap
    const cachable = Object(input) === input && Object(schema) === schema;
    return cache.getResults(input, cachable, () => unvisit(input, schema));
  };
};
export default getUnvisit;
function denormalizeLegacySchema(schema, input, unvisitAdapter) {
  const [data, _, suspend] = schema.denormalize(input, unvisitAdapter);
  // TODO(breaking): Drop support for initial Query version
  // queryEndpoint schema only overrides 'denormalize' and 'infer'
  const isQuery = !Object.hasOwn(schema, 'normalize') && Object.hasOwn(schema, 'denormalize') && Object.hasOwn(schema, 'infer');
  return suspend && !isQuery ? INVALID : data;
}

// TODO(breaking): This handles legacy schemas from 3.7 and below
function getUnvisitAdapter(unvisit) {
  return function (input, schema) {
    var _schema$constructor2;
    const isAll = (schema == null ? void 0 : (_schema$constructor2 = schema.constructor) == null ? void 0 : _schema$constructor2.name) === 'AllSchema';
    const value = unvisit(input, schema);

    // TODO(breaking): Drop support for initial All version
    if (isAll) {
      // we swap 'found' and 'suspend' because the initial Query version used 'found' to determine whether
      // it should 'process'
      return [typeof value === 'symbol' ? undefined : value, typeof value !== 'symbol', false];
    }
    return [typeof value === 'symbol' ? undefined : value, true, typeof value === 'symbol'];
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,