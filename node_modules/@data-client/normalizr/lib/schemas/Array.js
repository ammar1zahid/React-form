const validateSchema = definition => {
  /* istanbul ignore else */
  if (process.env.NODE_ENV !== 'production') {
    const isArray = Array.isArray(definition);
    if (isArray && definition.length > 1) {
      throw new Error(`Expected schema definition to be a single schema, but found ${definition.length}.`);
    }
  }
  return definition[0];
};
const getValues = input => Array.isArray(input) ? input : Object.keys(input).map(key => input[key]);
const filterEmpty = item => item !== undefined && typeof item !== 'symbol';
export const normalize = (schema, input, parent, key, visit, addEntity, visitedEntities, storeEntities, args) => {
  schema = validateSchema(schema);
  const values = getValues(input);

  // Special case: Arrays pass *their* parent on to their children, since there
  // is not any special information that can be gathered from themselves directly
  return values.map((value, index) => visit(value, parent, key, schema, addEntity, visitedEntities, storeEntities, args));
};
export const denormalize = (schema, input, args, unvisit) => {
  schema = validateSchema(schema);
  return input.map ? input.map(entityOrId => unvisit(entityOrId, schema)).filter(filterEmpty) : input;
};
export function infer(schema, args, indexes, recurse) {
  return undefined;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJ2YWxpZGF0ZVNjaGVtYSIsImRlZmluaXRpb24iLCJwcm9jZXNzIiwiZW52IiwiTk9ERV9FTlYiLCJpc0FycmF5IiwiQXJyYXkiLCJsZW5ndGgiLCJFcnJvciIsImdldFZhbHVlcyIsImlucHV0IiwiT2JqZWN0Iiwia2V5cyIsIm1hcCIsImtleSIsImZpbHRlckVtcHR5IiwiaXRlbSIsInVuZGVmaW5lZCIsIm5vcm1hbGl6ZSIsInNjaGVtYSIsInBhcmVudCIsInZpc2l0IiwiYWRkRW50aXR5IiwidmlzaXRlZEVudGl0aWVzIiwic3RvcmVFbnRpdGllcyIsImFyZ3MiLCJ2YWx1ZXMiLCJ2YWx1ZSIsImluZGV4IiwiZGVub3JtYWxpemUiLCJ1bnZpc2l0IiwiZW50aXR5T3JJZCIsImZpbHRlciIsImluZmVyIiwiaW5kZXhlcyIsInJlY3Vyc2UiXSwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NoZW1hcy9BcnJheS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB2YWxpZGF0ZVNjaGVtYSA9IGRlZmluaXRpb24gPT4ge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGNvbnN0IGlzQXJyYXkgPSBBcnJheS5pc0FycmF5KGRlZmluaXRpb24pO1xuICAgIGlmIChpc0FycmF5ICYmIGRlZmluaXRpb24ubGVuZ3RoID4gMSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgRXhwZWN0ZWQgc2NoZW1hIGRlZmluaXRpb24gdG8gYmUgYSBzaW5nbGUgc2NoZW1hLCBidXQgZm91bmQgJHtkZWZpbml0aW9uLmxlbmd0aH0uYCxcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGRlZmluaXRpb25bMF07XG59O1xuXG5jb25zdCBnZXRWYWx1ZXMgPSBpbnB1dCA9PlxuICBBcnJheS5pc0FycmF5KGlucHV0KSA/IGlucHV0IDogT2JqZWN0LmtleXMoaW5wdXQpLm1hcChrZXkgPT4gaW5wdXRba2V5XSk7XG5cbmNvbnN0IGZpbHRlckVtcHR5ID0gaXRlbSA9PiBpdGVtICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIGl0ZW0gIT09ICdzeW1ib2wnO1xuXG5leHBvcnQgY29uc3Qgbm9ybWFsaXplID0gKFxuICBzY2hlbWE6IGFueSxcbiAgaW5wdXQ6IGFueSxcbiAgcGFyZW50OiBhbnksXG4gIGtleTogYW55LFxuICB2aXNpdDogYW55LFxuICBhZGRFbnRpdHk6IGFueSxcbiAgdmlzaXRlZEVudGl0aWVzOiBhbnksXG4gIHN0b3JlRW50aXRpZXM6IGFueSxcbiAgYXJnczogYW55W10sXG4pID0+IHtcbiAgc2NoZW1hID0gdmFsaWRhdGVTY2hlbWEoc2NoZW1hKTtcblxuICBjb25zdCB2YWx1ZXMgPSBnZXRWYWx1ZXMoaW5wdXQpO1xuXG4gIC8vIFNwZWNpYWwgY2FzZTogQXJyYXlzIHBhc3MgKnRoZWlyKiBwYXJlbnQgb24gdG8gdGhlaXIgY2hpbGRyZW4sIHNpbmNlIHRoZXJlXG4gIC8vIGlzIG5vdCBhbnkgc3BlY2lhbCBpbmZvcm1hdGlvbiB0aGF0IGNhbiBiZSBnYXRoZXJlZCBmcm9tIHRoZW1zZWx2ZXMgZGlyZWN0bHlcbiAgcmV0dXJuIHZhbHVlcy5tYXAoKHZhbHVlLCBpbmRleCkgPT5cbiAgICB2aXNpdChcbiAgICAgIHZhbHVlLFxuICAgICAgcGFyZW50LFxuICAgICAga2V5LFxuICAgICAgc2NoZW1hLFxuICAgICAgYWRkRW50aXR5LFxuICAgICAgdmlzaXRlZEVudGl0aWVzLFxuICAgICAgc3RvcmVFbnRpdGllcyxcbiAgICAgIGFyZ3MsXG4gICAgKSxcbiAgKTtcbn07XG5cbmV4cG9ydCBjb25zdCBkZW5vcm1hbGl6ZSA9IChcbiAgc2NoZW1hOiBhbnksXG4gIGlucHV0OiBhbnksXG4gIGFyZ3M6IHJlYWRvbmx5IGFueVtdLFxuICB1bnZpc2l0OiBhbnksXG4pOiBhbnkgPT4ge1xuICBzY2hlbWEgPSB2YWxpZGF0ZVNjaGVtYShzY2hlbWEpO1xuICByZXR1cm4gaW5wdXQubWFwXG4gICAgPyBpbnB1dC5tYXAoZW50aXR5T3JJZCA9PiB1bnZpc2l0KGVudGl0eU9ySWQsIHNjaGVtYSkpLmZpbHRlcihmaWx0ZXJFbXB0eSlcbiAgICA6IGlucHV0O1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIGluZmVyKHNjaGVtYTogYW55LCBhcmdzOiBhbnksIGluZGV4ZXM6IGFueSwgcmVjdXJzZTogYW55KSB7XG4gIHJldHVybiB1bmRlZmluZWQ7XG59XG4iXSwibWFwcGluZ3MiOiJBQUFBLE1BQU1BLGNBQWMsR0FBR0MsVUFBVSxJQUFJO0VBQ25DO0VBQ0EsSUFBSUMsT0FBTyxDQUFDQyxHQUFHLENBQUNDLFFBQVEsS0FBSyxZQUFZLEVBQUU7SUFDekMsTUFBTUMsT0FBTyxHQUFHQyxLQUFLLENBQUNELE9BQU8sQ0FBQ0osVUFBVSxDQUFDO0lBQ3pDLElBQUlJLE9BQU8sSUFBSUosVUFBVSxDQUFDTSxNQUFNLEdBQUcsQ0FBQyxFQUFFO01BQ3BDLE1BQU0sSUFBSUMsS0FBSyxDQUNaLCtEQUE4RFAsVUFBVSxDQUFDTSxNQUFPLEdBQ25GLENBQUM7SUFDSDtFQUNGO0VBRUEsT0FBT04sVUFBVSxDQUFDLENBQUMsQ0FBQztBQUN0QixDQUFDO0FBRUQsTUFBTVEsU0FBUyxHQUFHQyxLQUFLLElBQ3JCSixLQUFLLENBQUNELE9BQU8sQ0FBQ0ssS0FBSyxDQUFDLEdBQUdBLEtBQUssR0FBR0MsTUFBTSxDQUFDQyxJQUFJLENBQUNGLEtBQUssQ0FBQyxDQUFDRyxHQUFHLENBQUNDLEdBQUcsSUFBSUosS0FBSyxDQUFDSSxHQUFHLENBQUMsQ0FBQztBQUUxRSxNQUFNQyxXQUFXLEdBQUdDLElBQUksSUFBSUEsSUFBSSxLQUFLQyxTQUFTLElBQUksT0FBT0QsSUFBSSxLQUFLLFFBQVE7QUFFMUUsT0FBTyxNQUFNRSxTQUFTLEdBQUdBLENBQ3ZCQyxNQUFXLEVBQ1hULEtBQVUsRUFDVlUsTUFBVyxFQUNYTixHQUFRLEVBQ1JPLEtBQVUsRUFDVkMsU0FBYyxFQUNkQyxlQUFvQixFQUNwQkMsYUFBa0IsRUFDbEJDLElBQVcsS0FDUjtFQUNITixNQUFNLEdBQUduQixjQUFjLENBQUNtQixNQUFNLENBQUM7RUFFL0IsTUFBTU8sTUFBTSxHQUFHakIsU0FBUyxDQUFDQyxLQUFLLENBQUM7O0VBRS9CO0VBQ0E7RUFDQSxPQUFPZ0IsTUFBTSxDQUFDYixHQUFHLENBQUMsQ0FBQ2MsS0FBSyxFQUFFQyxLQUFLLEtBQzdCUCxLQUFLLENBQ0hNLEtBQUssRUFDTFAsTUFBTSxFQUNOTixHQUFHLEVBQ0hLLE1BQU0sRUFDTkcsU0FBUyxFQUNUQyxlQUFlLEVBQ2ZDLGFBQWEsRUFDYkMsSUFDRixDQUNGLENBQUM7QUFDSCxDQUFDO0FBRUQsT0FBTyxNQUFNSSxXQUFXLEdBQUdBLENBQ3pCVixNQUFXLEVBQ1hULEtBQVUsRUFDVmUsSUFBb0IsRUFDcEJLLE9BQVksS0FDSjtFQUNSWCxNQUFNLEdBQUduQixjQUFjLENBQUNtQixNQUFNLENBQUM7RUFDL0IsT0FBT1QsS0FBSyxDQUFDRyxHQUFHLEdBQ1pILEtBQUssQ0FBQ0csR0FBRyxDQUFDa0IsVUFBVSxJQUFJRCxPQUFPLENBQUNDLFVBQVUsRUFBRVosTUFBTSxDQUFDLENBQUMsQ0FBQ2EsTUFBTSxDQUFDakIsV0FBVyxDQUFDLEdBQ3hFTCxLQUFLO0FBQ1gsQ0FBQztBQUVELE9BQU8sU0FBU3VCLEtBQUtBLENBQUNkLE1BQVcsRUFBRU0sSUFBUyxFQUFFUyxPQUFZLEVBQUVDLE9BQVksRUFBRTtFQUN4RSxPQUFPbEIsU0FBUztBQUNsQiJ9