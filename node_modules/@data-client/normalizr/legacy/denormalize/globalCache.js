import WeakEntityMap, { depToPaths } from '../WeakEntityMap.js';
export default class GlobalCache {
  constructor(getEntity, entityCache, resultCache) {
    this.dependencies = [];
    this.cycleCache = {};
    this.cycleIndex = -1;
    this.localCache = {};
    this._getEntity = getEntity;
    this.getCache = getEntityCaches(entityCache);
    this.resultCache = resultCache;
  }
  getEntity(pk, schema, entity, computeValue) {
    const key = schema.key;
    const {
      localCacheKey,
      cycleCacheKey
    } = this.getCacheKey(key);
    if (!localCacheKey[pk]) {
      const globalCache = this.getCache(pk, schema);
      const [cacheValue, cachePath] = globalCache.get(entity, this._getEntity);
      // TODO: what if this just returned the deps - then we don't need to store them

      if (cachePath) {
        localCacheKey[pk] = cacheValue.value;
        // TODO: can we store the cache values instead of tracking *all* their sources?
        // this is only used for setting results cache correctly. if we got this far we will def need to set as we would have already tried getting it
        this.dependencies.push(...cacheValue.dependencies);
        return cacheValue.value;
      }
      // if we don't find in denormalize cache then do full denormalize
      else {
        const trackingIndex = this.dependencies.length;
        cycleCacheKey[pk] = trackingIndex;
        this.dependencies.push({
          entity,
          path: {
            key,
            pk
          }
        });

        /** NON-GLOBAL_CACHE CODE */
        computeValue(localCacheKey);
        /** /END NON-GLOBAL_CACHE CODE */

        delete cycleCacheKey[pk];
        // if in cycle, use the start of the cycle to track all deps
        // otherwise, we use our own trackingIndex
        const localKey = this.dependencies.slice(this.cycleIndex === -1 ? trackingIndex : this.cycleIndex);
        const cacheValue = {
          dependencies: localKey,
          value: localCacheKey[pk]
        };
        globalCache.set(localKey, cacheValue);

        // start of cycle - reset cycle detection
        if (this.cycleIndex === trackingIndex) {
          this.cycleIndex = -1;
        }
      }
    } else {
      // cycle detected
      if (pk in cycleCacheKey) {
        this.cycleIndex = cycleCacheKey[pk];
      } else {
        // with no cycle, globalCacheEntry will have already been set
        this.dependencies.push({
          entity,
          path: {
            key,
            pk
          }
        });
      }
    }
    return localCacheKey[pk];
  }
  getCacheKey(key) {
    if (!(key in this.localCache)) {
      this.localCache[key] = Object.create(null);
    }
    if (!(key in this.cycleCache)) {
      this.cycleCache[key] = Object.create(null);
    }
    const localCacheKey = this.localCache[key];
    const cycleCacheKey = this.cycleCache[key];
    return {
      localCacheKey,
      cycleCacheKey
    };
  }
  getResults(input, cachable, computeValue) {
    if (!cachable) {
      return {
        data: computeValue(),
        paths: this.paths()
      };
    }
    let [data, paths] = this.resultCache.get(input, this._getEntity);
    if (paths === undefined) {
      data = computeValue();
      // we want to do this before we add our 'input' entry
      paths = this.paths();
      // for the first entry, `path` is ignored so empty members is fine
      this.dependencies.unshift({
        entity: input,
        path: {
          key: '',
          pk: ''
        }
      });
      this.resultCache.set(this.dependencies, data);
    }
    return {
      data,
      paths
    };
  }
  paths() {
    return depToPaths(this.dependencies);
  }
}
const getEntityCaches = entityCache => {
  return (pk, schema) => {
    var _ref;
    const key = schema.key;
    // collections should use the entities they collect over
    // TODO: this should be based on a public interface
    const entityInstance = (_ref = schema.cacheWith) != null ? _ref : schema;
    if (!(key in entityCache)) {
      entityCache[key] = Object.create(null);
    }
    const entityCacheKey = entityCache[key];
    if (!entityCacheKey[pk]) entityCacheKey[pk] = new WeakMap();
    let wem = entityCacheKey[pk].get(entityInstance);
    if (!wem) {
      wem = new WeakEntityMap();
      entityCacheKey[pk].set(entityInstance, wem);
    }
    return wem;
  };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJXZWFrRW50aXR5TWFwIiwiZGVwVG9QYXRocyIsIkdsb2JhbENhY2hlIiwiY29uc3RydWN0b3IiLCJnZXRFbnRpdHkiLCJlbnRpdHlDYWNoZSIsInJlc3VsdENhY2hlIiwiZGVwZW5kZW5jaWVzIiwiY3ljbGVDYWNoZSIsImN5Y2xlSW5kZXgiLCJsb2NhbENhY2hlIiwiX2dldEVudGl0eSIsImdldENhY2hlIiwiZ2V0RW50aXR5Q2FjaGVzIiwicGsiLCJzY2hlbWEiLCJlbnRpdHkiLCJjb21wdXRlVmFsdWUiLCJrZXkiLCJsb2NhbENhY2hlS2V5IiwiY3ljbGVDYWNoZUtleSIsImdldENhY2hlS2V5IiwiZ2xvYmFsQ2FjaGUiLCJjYWNoZVZhbHVlIiwiY2FjaGVQYXRoIiwiZ2V0IiwidmFsdWUiLCJwdXNoIiwidHJhY2tpbmdJbmRleCIsImxlbmd0aCIsInBhdGgiLCJsb2NhbEtleSIsInNsaWNlIiwic2V0IiwiT2JqZWN0IiwiY3JlYXRlIiwiZ2V0UmVzdWx0cyIsImlucHV0IiwiY2FjaGFibGUiLCJkYXRhIiwicGF0aHMiLCJ1bmRlZmluZWQiLCJ1bnNoaWZ0IiwiX3JlZiIsImVudGl0eUluc3RhbmNlIiwiY2FjaGVXaXRoIiwiZW50aXR5Q2FjaGVLZXkiLCJXZWFrTWFwIiwid2VtIl0sInNvdXJjZXMiOlsiLi4vLi4vc3JjL2Rlbm9ybWFsaXplL2dsb2JhbENhY2hlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIENhY2hlIGZyb20gJy4vY2FjaGUuanMnO1xuaW1wb3J0IHR5cGUgeyBFbnRpdHlJbnRlcmZhY2UgfSBmcm9tICcuLi9pbnRlcmZhY2UuanMnO1xuaW1wb3J0IHR5cGUgeyBEZW5vcm1hbGl6ZUNhY2hlLCBQYXRoIH0gZnJvbSAnLi4vdHlwZXMuanMnO1xuaW1wb3J0IFdlYWtFbnRpdHlNYXAsIHtcbiAgdHlwZSBEZXAsXG4gIHR5cGUgR2V0RW50aXR5LFxuICBkZXBUb1BhdGhzLFxufSBmcm9tICcuLi9XZWFrRW50aXR5TWFwLmpzJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgR2xvYmFsQ2FjaGUgaW1wbGVtZW50cyBDYWNoZSB7XG4gIHByaXZhdGUgZGVwZW5kZW5jaWVzOiBEZXBbXSA9IFtdO1xuICBwcml2YXRlIGN5Y2xlQ2FjaGU6IFJlY29yZDxzdHJpbmcsIFJlY29yZDxzdHJpbmcsIG51bWJlcj4+ID0ge307XG4gIHByaXZhdGUgY3ljbGVJbmRleCA9IC0xO1xuICBwcml2YXRlIGxvY2FsQ2FjaGU6IFJlY29yZDxzdHJpbmcsIFJlY29yZDxzdHJpbmcsIGFueT4+ID0ge307XG5cbiAgcHJpdmF0ZSBkZWNsYXJlIGdldENhY2hlOiAoXG4gICAgcGs6IHN0cmluZyxcbiAgICBzY2hlbWE6IEVudGl0eUludGVyZmFjZSxcbiAgKSA9PiBXZWFrRW50aXR5TWFwPG9iamVjdCwgYW55PjtcblxuICBwcml2YXRlIGRlY2xhcmUgX2dldEVudGl0eTogR2V0RW50aXR5O1xuICBwcml2YXRlIGRlY2xhcmUgcmVzdWx0Q2FjaGU6IERlbm9ybWFsaXplQ2FjaGVbJ3Jlc3VsdHMnXVtzdHJpbmddO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIGdldEVudGl0eTogR2V0RW50aXR5LFxuICAgIGVudGl0eUNhY2hlOiBEZW5vcm1hbGl6ZUNhY2hlWydlbnRpdGllcyddLFxuICAgIHJlc3VsdENhY2hlOiBEZW5vcm1hbGl6ZUNhY2hlWydyZXN1bHRzJ11bc3RyaW5nXSxcbiAgKSB7XG4gICAgdGhpcy5fZ2V0RW50aXR5ID0gZ2V0RW50aXR5O1xuICAgIHRoaXMuZ2V0Q2FjaGUgPSBnZXRFbnRpdHlDYWNoZXMoZW50aXR5Q2FjaGUpO1xuICAgIHRoaXMucmVzdWx0Q2FjaGUgPSByZXN1bHRDYWNoZTtcbiAgfVxuXG4gIGdldEVudGl0eShcbiAgICBwazogc3RyaW5nLFxuICAgIHNjaGVtYTogRW50aXR5SW50ZXJmYWNlLFxuICAgIGVudGl0eTogYW55LFxuICAgIGNvbXB1dGVWYWx1ZTogKGxvY2FsQ2FjaGVLZXk6IFJlY29yZDxzdHJpbmcsIGFueT4pID0+IHZvaWQsXG4gICk6IG9iamVjdCB8IHVuZGVmaW5lZCB8IHN5bWJvbCB7XG4gICAgY29uc3Qga2V5ID0gc2NoZW1hLmtleTtcbiAgICBjb25zdCB7IGxvY2FsQ2FjaGVLZXksIGN5Y2xlQ2FjaGVLZXkgfSA9IHRoaXMuZ2V0Q2FjaGVLZXkoa2V5KTtcblxuICAgIGlmICghbG9jYWxDYWNoZUtleVtwa10pIHtcbiAgICAgIGNvbnN0IGdsb2JhbENhY2hlOiBXZWFrRW50aXR5TWFwPG9iamVjdCwgRW50aXR5Q2FjaGVWYWx1ZT4gPVxuICAgICAgICB0aGlzLmdldENhY2hlKHBrLCBzY2hlbWEpO1xuICAgICAgY29uc3QgW2NhY2hlVmFsdWUsIGNhY2hlUGF0aF0gPSBnbG9iYWxDYWNoZS5nZXQoZW50aXR5LCB0aGlzLl9nZXRFbnRpdHkpO1xuICAgICAgLy8gVE9ETzogd2hhdCBpZiB0aGlzIGp1c3QgcmV0dXJuZWQgdGhlIGRlcHMgLSB0aGVuIHdlIGRvbid0IG5lZWQgdG8gc3RvcmUgdGhlbVxuXG4gICAgICBpZiAoY2FjaGVQYXRoKSB7XG4gICAgICAgIGxvY2FsQ2FjaGVLZXlbcGtdID0gY2FjaGVWYWx1ZS52YWx1ZTtcbiAgICAgICAgLy8gVE9ETzogY2FuIHdlIHN0b3JlIHRoZSBjYWNoZSB2YWx1ZXMgaW5zdGVhZCBvZiB0cmFja2luZyAqYWxsKiB0aGVpciBzb3VyY2VzP1xuICAgICAgICAvLyB0aGlzIGlzIG9ubHkgdXNlZCBmb3Igc2V0dGluZyByZXN1bHRzIGNhY2hlIGNvcnJlY3RseS4gaWYgd2UgZ290IHRoaXMgZmFyIHdlIHdpbGwgZGVmIG5lZWQgdG8gc2V0IGFzIHdlIHdvdWxkIGhhdmUgYWxyZWFkeSB0cmllZCBnZXR0aW5nIGl0XG4gICAgICAgIHRoaXMuZGVwZW5kZW5jaWVzLnB1c2goLi4uY2FjaGVWYWx1ZS5kZXBlbmRlbmNpZXMpO1xuICAgICAgICByZXR1cm4gY2FjaGVWYWx1ZS52YWx1ZTtcbiAgICAgIH1cbiAgICAgIC8vIGlmIHdlIGRvbid0IGZpbmQgaW4gZGVub3JtYWxpemUgY2FjaGUgdGhlbiBkbyBmdWxsIGRlbm9ybWFsaXplXG4gICAgICBlbHNlIHtcbiAgICAgICAgY29uc3QgdHJhY2tpbmdJbmRleCA9IHRoaXMuZGVwZW5kZW5jaWVzLmxlbmd0aDtcbiAgICAgICAgY3ljbGVDYWNoZUtleVtwa10gPSB0cmFja2luZ0luZGV4O1xuICAgICAgICB0aGlzLmRlcGVuZGVuY2llcy5wdXNoKHsgZW50aXR5LCBwYXRoOiB7IGtleSwgcGsgfSB9KTtcblxuICAgICAgICAvKiogTk9OLUdMT0JBTF9DQUNIRSBDT0RFICovXG4gICAgICAgIGNvbXB1dGVWYWx1ZShsb2NhbENhY2hlS2V5KTtcbiAgICAgICAgLyoqIC9FTkQgTk9OLUdMT0JBTF9DQUNIRSBDT0RFICovXG5cbiAgICAgICAgZGVsZXRlIGN5Y2xlQ2FjaGVLZXlbcGtdO1xuICAgICAgICAvLyBpZiBpbiBjeWNsZSwgdXNlIHRoZSBzdGFydCBvZiB0aGUgY3ljbGUgdG8gdHJhY2sgYWxsIGRlcHNcbiAgICAgICAgLy8gb3RoZXJ3aXNlLCB3ZSB1c2Ugb3VyIG93biB0cmFja2luZ0luZGV4XG4gICAgICAgIGNvbnN0IGxvY2FsS2V5ID0gdGhpcy5kZXBlbmRlbmNpZXMuc2xpY2UoXG4gICAgICAgICAgdGhpcy5jeWNsZUluZGV4ID09PSAtMSA/IHRyYWNraW5nSW5kZXggOiB0aGlzLmN5Y2xlSW5kZXgsXG4gICAgICAgICk7XG4gICAgICAgIGNvbnN0IGNhY2hlVmFsdWU6IEVudGl0eUNhY2hlVmFsdWUgPSB7XG4gICAgICAgICAgZGVwZW5kZW5jaWVzOiBsb2NhbEtleSxcbiAgICAgICAgICB2YWx1ZTogbG9jYWxDYWNoZUtleVtwa10sXG4gICAgICAgIH07XG4gICAgICAgIGdsb2JhbENhY2hlLnNldChsb2NhbEtleSwgY2FjaGVWYWx1ZSk7XG5cbiAgICAgICAgLy8gc3RhcnQgb2YgY3ljbGUgLSByZXNldCBjeWNsZSBkZXRlY3Rpb25cbiAgICAgICAgaWYgKHRoaXMuY3ljbGVJbmRleCA9PT0gdHJhY2tpbmdJbmRleCkge1xuICAgICAgICAgIHRoaXMuY3ljbGVJbmRleCA9IC0xO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGN5Y2xlIGRldGVjdGVkXG4gICAgICBpZiAocGsgaW4gY3ljbGVDYWNoZUtleSkge1xuICAgICAgICB0aGlzLmN5Y2xlSW5kZXggPSBjeWNsZUNhY2hlS2V5W3BrXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIHdpdGggbm8gY3ljbGUsIGdsb2JhbENhY2hlRW50cnkgd2lsbCBoYXZlIGFscmVhZHkgYmVlbiBzZXRcbiAgICAgICAgdGhpcy5kZXBlbmRlbmNpZXMucHVzaCh7IGVudGl0eSwgcGF0aDogeyBrZXksIHBrIH0gfSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBsb2NhbENhY2hlS2V5W3BrXTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0Q2FjaGVLZXkoa2V5OiBzdHJpbmcpIHtcbiAgICBpZiAoIShrZXkgaW4gdGhpcy5sb2NhbENhY2hlKSkge1xuICAgICAgdGhpcy5sb2NhbENhY2hlW2tleV0gPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIH1cbiAgICBpZiAoIShrZXkgaW4gdGhpcy5jeWNsZUNhY2hlKSkge1xuICAgICAgdGhpcy5jeWNsZUNhY2hlW2tleV0gPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIH1cbiAgICBjb25zdCBsb2NhbENhY2hlS2V5ID0gdGhpcy5sb2NhbENhY2hlW2tleV07XG4gICAgY29uc3QgY3ljbGVDYWNoZUtleSA9IHRoaXMuY3ljbGVDYWNoZVtrZXldO1xuICAgIHJldHVybiB7IGxvY2FsQ2FjaGVLZXksIGN5Y2xlQ2FjaGVLZXkgfTtcbiAgfVxuXG4gIGdldFJlc3VsdHMoXG4gICAgaW5wdXQ6IGFueSxcbiAgICBjYWNoYWJsZTogYm9vbGVhbixcbiAgICBjb21wdXRlVmFsdWU6ICgpID0+IGFueSxcbiAgKToge1xuICAgIGRhdGE6IGFueTtcbiAgICBwYXRoczogUGF0aFtdO1xuICB9IHtcbiAgICBpZiAoIWNhY2hhYmxlKSB7XG4gICAgICByZXR1cm4geyBkYXRhOiBjb21wdXRlVmFsdWUoKSwgcGF0aHM6IHRoaXMucGF0aHMoKSB9O1xuICAgIH1cblxuICAgIGxldCBbZGF0YSwgcGF0aHNdID0gdGhpcy5yZXN1bHRDYWNoZS5nZXQoaW5wdXQsIHRoaXMuX2dldEVudGl0eSk7XG5cbiAgICBpZiAocGF0aHMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgZGF0YSA9IGNvbXB1dGVWYWx1ZSgpO1xuICAgICAgLy8gd2Ugd2FudCB0byBkbyB0aGlzIGJlZm9yZSB3ZSBhZGQgb3VyICdpbnB1dCcgZW50cnlcbiAgICAgIHBhdGhzID0gdGhpcy5wYXRocygpO1xuICAgICAgLy8gZm9yIHRoZSBmaXJzdCBlbnRyeSwgYHBhdGhgIGlzIGlnbm9yZWQgc28gZW1wdHkgbWVtYmVycyBpcyBmaW5lXG4gICAgICB0aGlzLmRlcGVuZGVuY2llcy51bnNoaWZ0KHsgZW50aXR5OiBpbnB1dCwgcGF0aDogeyBrZXk6ICcnLCBwazogJycgfSB9KTtcbiAgICAgIHRoaXMucmVzdWx0Q2FjaGUuc2V0KHRoaXMuZGVwZW5kZW5jaWVzLCBkYXRhKTtcbiAgICB9XG5cbiAgICByZXR1cm4geyBkYXRhLCBwYXRocyB9O1xuICB9XG5cbiAgcHJvdGVjdGVkIHBhdGhzKCkge1xuICAgIHJldHVybiBkZXBUb1BhdGhzKHRoaXMuZGVwZW5kZW5jaWVzKTtcbiAgfVxufVxuXG5pbnRlcmZhY2UgRW50aXR5Q2FjaGVWYWx1ZSB7XG4gIGRlcGVuZGVuY2llczogRGVwW107XG4gIHZhbHVlOiBvYmplY3QgfCBzeW1ib2wgfCB1bmRlZmluZWQ7XG59XG5cbmNvbnN0IGdldEVudGl0eUNhY2hlcyA9IChlbnRpdHlDYWNoZTogRGVub3JtYWxpemVDYWNoZVsnZW50aXRpZXMnXSkgPT4ge1xuICByZXR1cm4gKHBrOiBzdHJpbmcsIHNjaGVtYTogRW50aXR5SW50ZXJmYWNlKSA9PiB7XG4gICAgY29uc3Qga2V5ID0gc2NoZW1hLmtleTtcbiAgICAvLyBjb2xsZWN0aW9ucyBzaG91bGQgdXNlIHRoZSBlbnRpdGllcyB0aGV5IGNvbGxlY3Qgb3ZlclxuICAgIC8vIFRPRE86IHRoaXMgc2hvdWxkIGJlIGJhc2VkIG9uIGEgcHVibGljIGludGVyZmFjZVxuICAgIGNvbnN0IGVudGl0eUluc3RhbmNlOiBFbnRpdHlJbnRlcmZhY2UgPSAoc2NoZW1hLmNhY2hlV2l0aCBhcyBhbnkpID8/IHNjaGVtYTtcblxuICAgIGlmICghKGtleSBpbiBlbnRpdHlDYWNoZSkpIHtcbiAgICAgIGVudGl0eUNhY2hlW2tleV0gPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIH1cbiAgICBjb25zdCBlbnRpdHlDYWNoZUtleSA9IGVudGl0eUNhY2hlW2tleV07XG4gICAgaWYgKCFlbnRpdHlDYWNoZUtleVtwa10pXG4gICAgICBlbnRpdHlDYWNoZUtleVtwa10gPSBuZXcgV2Vha01hcDxcbiAgICAgICAgRW50aXR5SW50ZXJmYWNlLFxuICAgICAgICBXZWFrRW50aXR5TWFwPG9iamVjdCwgYW55PlxuICAgICAgPigpO1xuXG4gICAgbGV0IHdlbTogV2Vha0VudGl0eU1hcDxvYmplY3QsIGFueT4gPSBlbnRpdHlDYWNoZUtleVtwa10uZ2V0KFxuICAgICAgZW50aXR5SW5zdGFuY2UsXG4gICAgKSBhcyBhbnk7XG4gICAgaWYgKCF3ZW0pIHtcbiAgICAgIHdlbSA9IG5ldyBXZWFrRW50aXR5TWFwPG9iamVjdCwgYW55PigpO1xuICAgICAgZW50aXR5Q2FjaGVLZXlbcGtdLnNldChlbnRpdHlJbnN0YW5jZSwgd2VtKTtcbiAgICB9XG5cbiAgICByZXR1cm4gd2VtO1xuICB9O1xufTtcbiJdLCJtYXBwaW5ncyI6IkFBR0EsT0FBT0EsYUFBYSxJQUdsQkMsVUFBVSxRQUNMLHFCQUFxQjtBQUU1QixlQUFlLE1BQU1DLFdBQVcsQ0FBa0I7RUFjaERDLFdBQVdBLENBQ1RDLFNBQW9CLEVBQ3BCQyxXQUF5QyxFQUN6Q0MsV0FBZ0QsRUFDaEQ7SUFB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