import { isImmutable } from './schemas/ImmutableUtils.js';
/** Maps entity dependencies to a value (usually their denormalized form)
 *
 * Dependencies store `Path` to enable quick traversal using only `State`
 * If *any* members of the dependency get cleaned up, so does that key/value pair get removed.
 */
export default class WeakEntityMap {
  constructor() {
    this.next = new WeakMap();
    this.nextPath = undefined;
  }
  get(entity, getEntity) {
    let curLink = this.next.get(entity);
    if (!curLink) return EMPTY;
    while (curLink.nextPath) {
      const nextEntity = getEntity(curLink.nextPath);
      curLink = curLink.next.get(nextEntity);
      if (!curLink) return EMPTY;
    }
    // curLink exists, but has no path - so must have a value
    return [curLink.value, curLink.journey];
  }
  set(dependencies, value) {
    if (dependencies.length < 1) throw new KeySize();
    let curLink = this;
    for (const {
      entity,
      path
    } of dependencies) {
      let nextLink = curLink.next.get(entity);
      if (!nextLink) {
        nextLink = new Link();
        curLink.next.set(entity, nextLink);
      }
      curLink.nextPath = path;
      curLink = nextLink;
    }
    // in case there used to be more
    curLink.nextPath = undefined;
    curLink.value = value;
    // we could recompute this on get, but it would have a cost and we optimize for `get`
    curLink.journey = depToPaths(dependencies);
  }
}
const EMPTY = [undefined, undefined];
export function getEntities(state) {
  const entityIsImmutable = isImmutable(state);
  if (entityIsImmutable) {
    return ({
      key,
      pk
    }) => state.getIn([key, pk]);
  } else {
    return ({
      key,
      pk
    }) => {
      var _state$key;
      return (_state$key = state[key]) == null ? void 0 : _state$key[pk];
    };
  }
}
export function depToPaths(dependencies) {
  var _paths$;
  const paths = dependencies.map(dep => dep.path);
  // the first item is the result input not an actual entity
  if (((_paths$ = paths[0]) == null ? void 0 : _paths$.pk) === '') paths.shift();
  return paths;
}
/** Link in a chain */
class Link {
  constructor() {
    this.next = new WeakMap();
    this.value = undefined;
    this.journey = [];
    this.nextPath = undefined;
  }
}
class KeySize extends Error {
  constructor(...args) {
    super(...args);
    this.message = 'Keys must include at least one member';
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJpc0ltbXV0YWJsZSIsIldlYWtFbnRpdHlNYXAiLCJjb25zdHJ1Y3RvciIsIm5leHQiLCJXZWFrTWFwIiwibmV4dFBhdGgiLCJ1bmRlZmluZWQiLCJnZXQiLCJlbnRpdHkiLCJnZXRFbnRpdHkiLCJjdXJMaW5rIiwiRU1QVFkiLCJuZXh0RW50aXR5IiwidmFsdWUiLCJqb3VybmV5Iiwic2V0IiwiZGVwZW5kZW5jaWVzIiwibGVuZ3RoIiwiS2V5U2l6ZSIsInBhdGgiLCJuZXh0TGluayIsIkxpbmsiLCJkZXBUb1BhdGhzIiwiZ2V0RW50aXRpZXMiLCJzdGF0ZSIsImVudGl0eUlzSW1tdXRhYmxlIiwia2V5IiwicGsiLCJnZXRJbiIsIl9zdGF0ZSRrZXkiLCJfcGF0aHMkIiwicGF0aHMiLCJtYXAiLCJkZXAiLCJzaGlmdCIsIkVycm9yIiwiYXJncyIsIm1lc3NhZ2UiXSwic291cmNlcyI6WyIuLi9zcmMvV2Vha0VudGl0eU1hcC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpc0ltbXV0YWJsZSB9IGZyb20gJy4vc2NoZW1hcy9JbW11dGFibGVVdGlscy5qcyc7XG5pbXBvcnQgeyBQYXRoIH0gZnJvbSAnLi90eXBlcy5qcyc7XG5cbi8qKiBNYXBzIGVudGl0eSBkZXBlbmRlbmNpZXMgdG8gYSB2YWx1ZSAodXN1YWxseSB0aGVpciBkZW5vcm1hbGl6ZWQgZm9ybSlcbiAqXG4gKiBEZXBlbmRlbmNpZXMgc3RvcmUgYFBhdGhgIHRvIGVuYWJsZSBxdWljayB0cmF2ZXJzYWwgdXNpbmcgb25seSBgU3RhdGVgXG4gKiBJZiAqYW55KiBtZW1iZXJzIG9mIHRoZSBkZXBlbmRlbmN5IGdldCBjbGVhbmVkIHVwLCBzbyBkb2VzIHRoYXQga2V5L3ZhbHVlIHBhaXIgZ2V0IHJlbW92ZWQuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFdlYWtFbnRpdHlNYXA8SyBleHRlbmRzIG9iamVjdCA9IG9iamVjdCwgViA9IGFueT4ge1xuICByZWFkb25seSBuZXh0ID0gbmV3IFdlYWtNYXA8SywgTGluazxLLCBWPj4oKTtcbiAgbmV4dFBhdGg6IFBhdGggfCB1bmRlZmluZWQgPSB1bmRlZmluZWQ7XG5cbiAgZ2V0KGVudGl0eTogSywgZ2V0RW50aXR5OiBHZXRFbnRpdHk8SyB8IHN5bWJvbD4pIHtcbiAgICBsZXQgY3VyTGluayA9IHRoaXMubmV4dC5nZXQoZW50aXR5KTtcbiAgICBpZiAoIWN1ckxpbmspIHJldHVybiBFTVBUWTtcbiAgICB3aGlsZSAoY3VyTGluay5uZXh0UGF0aCkge1xuICAgICAgY29uc3QgbmV4dEVudGl0eSA9IGdldEVudGl0eShjdXJMaW5rLm5leHRQYXRoKTtcbiAgICAgIGN1ckxpbmsgPSBjdXJMaW5rLm5leHQuZ2V0KG5leHRFbnRpdHkgYXMgYW55KTtcbiAgICAgIGlmICghY3VyTGluaykgcmV0dXJuIEVNUFRZO1xuICAgIH1cbiAgICAvLyBjdXJMaW5rIGV4aXN0cywgYnV0IGhhcyBubyBwYXRoIC0gc28gbXVzdCBoYXZlIGEgdmFsdWVcbiAgICByZXR1cm4gW2N1ckxpbmsudmFsdWUsIGN1ckxpbmsuam91cm5leV0gYXMgW1YsIFBhdGhbXV07XG4gIH1cblxuICBzZXQoZGVwZW5kZW5jaWVzOiBEZXA8Sz5bXSwgdmFsdWU6IFYpIHtcbiAgICBpZiAoZGVwZW5kZW5jaWVzLmxlbmd0aCA8IDEpIHRocm93IG5ldyBLZXlTaXplKCk7XG4gICAgbGV0IGN1ckxpbms6IExpbms8SywgVj4gPSB0aGlzIGFzIGFueTtcbiAgICBmb3IgKGNvbnN0IHsgZW50aXR5LCBwYXRoIH0gb2YgZGVwZW5kZW5jaWVzKSB7XG4gICAgICBsZXQgbmV4dExpbmsgPSBjdXJMaW5rLm5leHQuZ2V0KGVudGl0eSk7XG4gICAgICBpZiAoIW5leHRMaW5rKSB7XG4gICAgICAgIG5leHRMaW5rID0gbmV3IExpbms8SywgVj4oKTtcbiAgICAgICAgY3VyTGluay5uZXh0LnNldChlbnRpdHksIG5leHRMaW5rKTtcbiAgICAgIH1cbiAgICAgIGN1ckxpbmsubmV4dFBhdGggPSBwYXRoO1xuICAgICAgY3VyTGluayA9IG5leHRMaW5rO1xuICAgIH1cbiAgICAvLyBpbiBjYXNlIHRoZXJlIHVzZWQgdG8gYmUgbW9yZVxuICAgIGN1ckxpbmsubmV4dFBhdGggPSB1bmRlZmluZWQ7XG4gICAgY3VyTGluay52YWx1ZSA9IHZhbHVlO1xuICAgIC8vIHdlIGNvdWxkIHJlY29tcHV0ZSB0aGlzIG9uIGdldCwgYnV0IGl0IHdvdWxkIGhhdmUgYSBjb3N0IGFuZCB3ZSBvcHRpbWl6ZSBmb3IgYGdldGBcbiAgICBjdXJMaW5rLmpvdXJuZXkgPSBkZXBUb1BhdGhzKGRlcGVuZGVuY2llcyk7XG4gIH1cbn1cblxuY29uc3QgRU1QVFkgPSBbdW5kZWZpbmVkLCB1bmRlZmluZWRdIGFzIGNvbnN0O1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0RW50aXRpZXM8SyBleHRlbmRzIG9iamVjdD4oc3RhdGU6IFN0YXRlPEs+KTogR2V0RW50aXR5PEs+IHtcbiAgY29uc3QgZW50aXR5SXNJbW11dGFibGUgPSBpc0ltbXV0YWJsZShzdGF0ZSk7XG5cbiAgaWYgKGVudGl0eUlzSW1tdXRhYmxlKSB7XG4gICAgcmV0dXJuICh7IGtleSwgcGsgfTogUGF0aCkgPT4gc3RhdGUuZ2V0SW4oW2tleSwgcGtdKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gKHsga2V5LCBwayB9OiBQYXRoKSA9PiBzdGF0ZVtrZXldPy5bcGtdO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkZXBUb1BhdGhzKGRlcGVuZGVuY2llczogRGVwW10pIHtcbiAgY29uc3QgcGF0aHMgPSBkZXBlbmRlbmNpZXMubWFwKGRlcCA9PiBkZXAucGF0aCk7XG4gIC8vIHRoZSBmaXJzdCBpdGVtIGlzIHRoZSByZXN1bHQgaW5wdXQgbm90IGFuIGFjdHVhbCBlbnRpdHlcbiAgaWYgKHBhdGhzWzBdPy5wayA9PT0gJycpIHBhdGhzLnNoaWZ0KCk7XG4gIHJldHVybiBwYXRocztcbn1cblxuZXhwb3J0IHR5cGUgR2V0RW50aXR5PEsgPSBvYmplY3QgfCBzeW1ib2w+ID0gKGxvb2t1cDogUGF0aCkgPT4gSztcblxuLyoqIExpbmsgaW4gYSBjaGFpbiAqL1xuY2xhc3MgTGluazxLIGV4dGVuZHMgb2JqZWN0LCBWPiB7XG4gIG5leHQgPSBuZXcgV2Vha01hcDxLLCBMaW5rPEssIFY+PigpO1xuICB2YWx1ZTogViB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZDtcbiAgam91cm5leTogUGF0aFtdID0gW107XG4gIG5leHRQYXRoOiBQYXRoIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkO1xufVxuXG5jbGFzcyBLZXlTaXplIGV4dGVuZHMgRXJyb3Ige1xuICBtZXNzYWdlID0gJ0tleXMgbXVzdCBpbmNsdWRlIGF0IGxlYXN0IG9uZSBtZW1iZXInO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIERlcDxLID0gb2JqZWN0PiB7XG4gIHBhdGg6IFBhdGg7XG4gIGVudGl0eTogSztcbn1cblxudHlwZSBTdGF0ZTxLIGV4dGVuZHMgb2JqZWN0PiA9XG4gIHwgUmVjb3JkPHN0cmluZywgUmVjb3JkPHN0cmluZywgSz4+XG4gIHwgeyBnZXRJbihwYXRoOiBbc3RyaW5nLCBzdHJpbmddKTogSyB9O1xuIl0sIm1hcHBpbmdzIjoiQUFBQSxTQUFTQSxXQUFXLFFBQVEsNkJBQTZCO0FBR3pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLE1BQU1DLGFBQWEsQ0FBcUM7RUFBQUMsWUFBQTtJQUFBLEtBQzVEQyxJQUFJLEdBQUcsSUFBSUMsT0FBTyxDQUFnQixDQUFDO0lBQUEsS0FDNUNDLFFBQVEsR0FBcUJDLFNBQVM7RUFBQTtFQUV0Q0MsR0FBR0EsQ0FBQ0MsTUFBUyxFQUFFQyxTQUFnQyxFQUFFO0lBQy9DLElBQUlDLE9BQU8sR0FBRyxJQUFJLENBQUNQLElBQUksQ0FBQ0ksR0FBRyxDQUFDQyxNQUFNLENBQUM7SUFDbkMsSUFBSSxDQUFDRSxPQUFPLEVBQUUsT0FBT0MsS0FBSztJQUMxQixPQUFPRCxPQUFPLENBQUNMLFFBQVEsRUFBRTtNQUN2QixNQUFNTyxVQUFVLEdBQUdILFNBQVMsQ0FBQ0MsT0FBTyxDQUFDTCxRQUFRLENBQUM7TUFDOUNLLE9BQU8sR0FBR0EsT0FBTyxDQUFDUCxJQUFJLENBQUNJLEdBQUcsQ0FBQ0ssVUFBaUIsQ0FBQztNQUM3QyxJQUFJLENBQUNGLE9BQU8sRUFBRSxPQUFPQyxLQUFLO0lBQzVCO0lBQ0E7SUFDQSxPQUFPLENBQUNELE9BQU8sQ0FBQ0csS0FBSyxFQUFFSCxPQUFPLENBQUNJLE9BQU8sQ0FBQztFQUN6QztFQUVBQyxHQUFHQSxDQUFDQyxZQUFzQixFQUFFSCxLQUFRLEVBQUU7SUFDcEMsSUFBSUcsWUFBWSxDQUFDQyxNQUFNLEdBQUcsQ0FBQyxFQUFFLE1BQU0sSUFBSUMsT0FBTyxDQUFDLENBQUM7SUFDaEQsSUFBSVIsT0FBbUIsR0FBRyxJQUFXO0lBQ3JDLEtBQUssTUFBTTtNQUFFRixNQUFNO01BQUVXO0lBQUssQ0FBQyxJQUFJSCxZQUFZLEVBQUU7TUFDM0MsSUFBSUksUUFBUSxHQUFHVixPQUFPLENBQUNQLElBQUksQ0FBQ0ksR0FBRyxDQUFDQyxNQUFNLENBQUM7TUFDdkMsSUFBSSxDQUFDWSxRQUFRLEVBQUU7UUFDYkEsUUFBUSxHQUFHLElBQUlDLElBQUksQ0FBTyxDQUFDO1FBQzNCWCxPQUFPLENBQUNQLElBQUksQ0FBQ1ksR0FBRyxDQUFDUCxNQUFNLEVBQUVZLFFBQVEsQ0FBQztNQUNwQztNQUNBVixPQUFPLENBQUNMLFFBQVEsR0FBR2MsSUFBSTtNQUN2QlQsT0FBTyxHQUFHVSxRQUFRO0lBQ3BCO0lBQ0E7SUFDQVYsT0FBTyxDQUFDTCxRQUFRLEdBQUdDLFNBQVM7SUFDNUJJLE9BQU8sQ0FBQ0csS0FBSyxHQUFHQSxLQUFLO0lBQ3JCO0lBQ0FILE9BQU8sQ0FBQ0ksT0FBTyxHQUFHUSxVQUFVLENBQUNOLFlBQVksQ0FBQztFQUM1QztBQUNGO0FBRUEsTUFBTUwsS0FBSyxHQUFHLENBQUNMLFNBQVMsRUFBRUEsU0FBUyxDQUFVO0FBRTdDLE9BQU8sU0FBU2lCLFdBQVdBLENBQW1CQyxLQUFlLEVBQWdCO0VBQzNFLE1BQU1DLGlCQUFpQixHQUFHekIsV0FBVyxDQUFDd0IsS0FBSyxDQUFDO0VBRTVDLElBQUlDLGlCQUFpQixFQUFFO0lBQ3JCLE9BQU8sQ0FBQztNQUFFQyxHQUFHO01BQUVDO0lBQVMsQ0FBQyxLQUFLSCxLQUFLLENBQUNJLEtBQUssQ0FBQyxDQUFDRixHQUFHLEVBQUVDLEVBQUUsQ0FBQyxDQUFDO0VBQ3RELENBQUMsTUFBTTtJQUNMLE9BQU8sQ0FBQztNQUFFRCxHQUFHO01BQUVDO0lBQVMsQ0FBQztNQUFBLElBQUFFLFVBQUE7TUFBQSxRQUFBQSxVQUFBLEdBQUtMLEtBQUssQ0FBQ0UsR0FBRyxDQUFDLHFCQUFWRyxVQUFBLENBQWFGLEVBQUUsQ0FBQztJQUFBO0VBQ2hEO0FBQ0Y7QUFFQSxPQUFPLFNBQVNMLFVBQVVBLENBQUNOLFlBQW1CLEVBQUU7RUFBQSxJQUFBYyxPQUFBO0VBQzlDLE1BQU1DLEtBQUssR0FBR2YsWUFBWSxDQUFDZ0IsR0FBRyxDQUFDQyxHQUFHLElBQUlBLEdBQUcsQ0FBQ2QsSUFBSSxDQUFDO0VBQy9DO0VBQ0EsSUFBSSxFQUFBVyxPQUFBLEdBQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMscUJBQVJELE9BQUEsQ0FBVUgsRUFBRSxNQUFLLEVBQUUsRUFBRUksS0FBSyxDQUFDRyxLQUFLLENBQUMsQ0FBQztFQUN0QyxPQUFPSCxLQUFLO0FBQ2Q7QUFJQTtBQUNBLE1BQU1WLElBQUksQ0FBc0I7RUFBQW5CLFlBQUE7SUFBQSxLQUM5QkMsSUFBSSxHQUFHLElBQUlDLE9BQU8sQ0FBZ0IsQ0FBQztJQUFBLEtBQ25DUyxLQUFLLEdBQWtCUCxTQUFTO0lBQUEsS0FDaENRLE9BQU8sR0FBVyxFQUFFO0lBQUEsS0FDcEJULFFBQVEsR0FBcUJDLFNBQVM7RUFBQTtBQUN4QztBQUVBLE1BQU1ZLE9BQU8sU0FBU2lCLEtBQUssQ0FBQztFQUFBakMsWUFBQSxHQUFBa0MsSUFBQTtJQUFBLFNBQUFBLElBQUE7SUFBQSxLQUMxQkMsT0FBTyxHQUFHLHVDQUF1QztFQUFBO0FBQ25EIn0=