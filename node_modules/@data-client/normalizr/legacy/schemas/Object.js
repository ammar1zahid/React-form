import { isImmutable, denormalizeImmutable } from './ImmutableUtils.js';
import { INVALID } from '../denormalize/symbol.js';
export const normalize = (schema, input, parent, key, visit, addEntity, visitedEntities, storeEntities, args) => {
  const object = Object.assign({}, input);
  Object.keys(schema).forEach(key => {
    const localSchema = schema[key];
    const value = visit(input[key], input, key, localSchema, addEntity, visitedEntities, storeEntities, args);
    if (value === undefined || value === null) {
      delete object[key];
    } else {
      object[key] = value;
    }
  });
  return object;
};
export const denormalize = (schema, input, args, unvisit) => {
  if (isImmutable(input)) {
    return denormalizeImmutable(schema, input, args, unvisit);
  }
  const object = Object.assign({}, input);
  let deleted = false;
  Object.keys(schema).forEach(key => {
    const item = unvisit(object[key], schema[key]);
    if (object[key] !== undefined) {
      object[key] = item;
    }
    if (typeof item === 'symbol') {
      deleted = true;
    }
  });
  return deleted ? INVALID : object;
};
export function infer(schema, args, indexes, recurse, entities) {
  const resultObject = {};
  for (const k of Object.keys(schema)) {
    resultObject[k] = recurse(schema[k], args, indexes, entities);
  }
  return resultObject;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJpc0ltbXV0YWJsZSIsImRlbm9ybWFsaXplSW1tdXRhYmxlIiwiSU5WQUxJRCIsIm5vcm1hbGl6ZSIsInNjaGVtYSIsImlucHV0IiwicGFyZW50Iiwia2V5IiwidmlzaXQiLCJhZGRFbnRpdHkiLCJ2aXNpdGVkRW50aXRpZXMiLCJzdG9yZUVudGl0aWVzIiwiYXJncyIsIm9iamVjdCIsIk9iamVjdCIsImFzc2lnbiIsImtleXMiLCJmb3JFYWNoIiwibG9jYWxTY2hlbWEiLCJ2YWx1ZSIsInVuZGVmaW5lZCIsImRlbm9ybWFsaXplIiwidW52aXNpdCIsImRlbGV0ZWQiLCJpdGVtIiwiaW5mZXIiLCJpbmRleGVzIiwicmVjdXJzZSIsImVudGl0aWVzIiwicmVzdWx0T2JqZWN0IiwiayJdLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY2hlbWFzL09iamVjdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpc0ltbXV0YWJsZSwgZGVub3JtYWxpemVJbW11dGFibGUgfSBmcm9tICcuL0ltbXV0YWJsZVV0aWxzLmpzJztcbmltcG9ydCB7IElOVkFMSUQgfSBmcm9tICcuLi9kZW5vcm1hbGl6ZS9zeW1ib2wuanMnO1xuXG5leHBvcnQgY29uc3Qgbm9ybWFsaXplID0gKFxuICBzY2hlbWE6IGFueSxcbiAgaW5wdXQ6IGFueSxcbiAgcGFyZW50OiBhbnksXG4gIGtleTogYW55LFxuICB2aXNpdDogYW55LFxuICBhZGRFbnRpdHk6IGFueSxcbiAgdmlzaXRlZEVudGl0aWVzOiBhbnksXG4gIHN0b3JlRW50aXRpZXM6IGFueSxcbiAgYXJnczogYW55W10sXG4pID0+IHtcbiAgY29uc3Qgb2JqZWN0ID0geyAuLi5pbnB1dCB9O1xuICBPYmplY3Qua2V5cyhzY2hlbWEpLmZvckVhY2goa2V5ID0+IHtcbiAgICBjb25zdCBsb2NhbFNjaGVtYSA9IHNjaGVtYVtrZXldO1xuICAgIGNvbnN0IHZhbHVlID0gdmlzaXQoXG4gICAgICBpbnB1dFtrZXldLFxuICAgICAgaW5wdXQsXG4gICAgICBrZXksXG4gICAgICBsb2NhbFNjaGVtYSxcbiAgICAgIGFkZEVudGl0eSxcbiAgICAgIHZpc2l0ZWRFbnRpdGllcyxcbiAgICAgIHN0b3JlRW50aXRpZXMsXG4gICAgICBhcmdzLFxuICAgICk7XG4gICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQgfHwgdmFsdWUgPT09IG51bGwpIHtcbiAgICAgIGRlbGV0ZSBvYmplY3Rba2V5XTtcbiAgICB9IGVsc2Uge1xuICAgICAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gb2JqZWN0O1xufTtcblxuZXhwb3J0IGNvbnN0IGRlbm9ybWFsaXplID0gKFxuICBzY2hlbWE6IGFueSxcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9iYW4tdHlwZXNcbiAgaW5wdXQ6IHt9LFxuICBhcmdzOiByZWFkb25seSBhbnlbXSxcbiAgdW52aXNpdDogYW55LFxuKTogYW55ID0+IHtcbiAgaWYgKGlzSW1tdXRhYmxlKGlucHV0KSkge1xuICAgIHJldHVybiBkZW5vcm1hbGl6ZUltbXV0YWJsZShzY2hlbWEsIGlucHV0LCBhcmdzLCB1bnZpc2l0KTtcbiAgfVxuXG4gIGNvbnN0IG9iamVjdCA9IHsgLi4uaW5wdXQgfTtcbiAgbGV0IGRlbGV0ZWQgPSBmYWxzZTtcbiAgT2JqZWN0LmtleXMoc2NoZW1hKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgY29uc3QgaXRlbSA9IHVudmlzaXQob2JqZWN0W2tleV0sIHNjaGVtYVtrZXldKTtcbiAgICBpZiAob2JqZWN0W2tleV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgb2JqZWN0W2tleV0gPSBpdGVtO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGl0ZW0gPT09ICdzeW1ib2wnKSB7XG4gICAgICBkZWxldGVkID0gdHJ1ZTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gZGVsZXRlZCA/IElOVkFMSUQgOiBvYmplY3Q7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gaW5mZXIoXG4gIHNjaGVtYTogYW55LFxuICBhcmdzOiByZWFkb25seSBhbnlbXSxcbiAgaW5kZXhlczogYW55LFxuICByZWN1cnNlOiBhbnksXG4gIGVudGl0aWVzOiBhbnksXG4pIHtcbiAgY29uc3QgcmVzdWx0T2JqZWN0OiBhbnkgPSB7fTtcbiAgZm9yIChjb25zdCBrIG9mIE9iamVjdC5rZXlzKHNjaGVtYSkpIHtcbiAgICByZXN1bHRPYmplY3Rba10gPSByZWN1cnNlKHNjaGVtYVtrXSwgYXJncywgaW5kZXhlcywgZW50aXRpZXMpO1xuICB9XG4gIHJldHVybiByZXN1bHRPYmplY3Q7XG59XG4iXSwibWFwcGluZ3MiOiJBQUFBLFNBQVNBLFdBQVcsRUFBRUMsb0JBQW9CLFFBQVEscUJBQXFCO0FBQ3ZFLFNBQVNDLE9BQU8sUUFBUSwwQkFBMEI7QUFFbEQsT0FBTyxNQUFNQyxTQUFTLEdBQUdBLENBQ3ZCQyxNQUFXLEVBQ1hDLEtBQVUsRUFDVkMsTUFBVyxFQUNYQyxHQUFRLEVBQ1JDLEtBQVUsRUFDVkMsU0FBYyxFQUNkQyxlQUFvQixFQUNwQkMsYUFBa0IsRUFDbEJDLElBQVcsS0FDUjtFQUNILE1BQU1DLE1BQU0sR0FBQUMsTUFBQSxDQUFBQyxNQUFBLEtBQVFWLEtBQUssQ0FBRTtFQUMzQlMsTUFBTSxDQUFDRSxJQUFJLENBQUNaLE1BQU0sQ0FBQyxDQUFDYSxPQUFPLENBQUNWLEdBQUcsSUFBSTtJQUNqQyxNQUFNVyxXQUFXLEdBQUdkLE1BQU0sQ0FBQ0csR0FBRyxDQUFDO0lBQy9CLE1BQU1ZLEtBQUssR0FBR1gsS0FBSyxDQUNqQkgsS0FBSyxDQUFDRSxHQUFHLENBQUMsRUFDVkYsS0FBSyxFQUNMRSxHQUFHLEVBQ0hXLFdBQVcsRUFDWFQsU0FBUyxFQUNUQyxlQUFlLEVBQ2ZDLGFBQWEsRUFDYkMsSUFDRixDQUFDO0lBQ0QsSUFBSU8sS0FBSyxLQUFLQyxTQUFTLElBQUlELEtBQUssS0FBSyxJQUFJLEVBQUU7TUFDekMsT0FBT04sTUFBTSxDQUFDTixHQUFHLENBQUM7SUFDcEIsQ0FBQyxNQUFNO01BQ0xNLE1BQU0sQ0FBQ04sR0FBRyxDQUFDLEdBQUdZLEtBQUs7SUFDckI7RUFDRixDQUFDLENBQUM7RUFDRixPQUFPTixNQUFNO0FBQ2YsQ0FBQztBQUVELE9BQU8sTUFBTVEsV0FBVyxHQUFHQSxDQUN6QmpCLE1BQVcsRUFFWEMsS0FBUyxFQUNUTyxJQUFvQixFQUNwQlUsT0FBWSxLQUNKO0VBQ1IsSUFBSXRCLFdBQVcsQ0FBQ0ssS0FBSyxDQUFDLEVBQUU7SUFDdEIsT0FBT0osb0JBQW9CLENBQUNHLE1BQU0sRUFBRUMsS0FBSyxFQUFFTyxJQUFJLEVBQUVVLE9BQU8sQ0FBQztFQUMzRDtFQUVBLE1BQU1ULE1BQU0sR0FBQUMsTUFBQSxDQUFBQyxNQUFBLEtBQVFWLEtBQUssQ0FBRTtFQUMzQixJQUFJa0IsT0FBTyxHQUFHLEtBQUs7RUFDbkJULE1BQU0sQ0FBQ0UsSUFBSSxDQUFDWixNQUFNLENBQUMsQ0FBQ2EsT0FBTyxDQUFDVixHQUFHLElBQUk7SUFDakMsTUFBTWlCLElBQUksR0FBR0YsT0FBTyxDQUFDVCxNQUFNLENBQUNOLEdBQUcsQ0FBQyxFQUFFSCxNQUFNLENBQUNHLEdBQUcsQ0FBQyxDQUFDO0lBQzlDLElBQUlNLE1BQU0sQ0FBQ04sR0FBRyxDQUFDLEtBQUthLFNBQVMsRUFBRTtNQUM3QlAsTUFBTSxDQUFDTixHQUFHLENBQUMsR0FBR2lCLElBQUk7SUFDcEI7SUFDQSxJQUFJLE9BQU9BLElBQUksS0FBSyxRQUFRLEVBQUU7TUFDNUJELE9BQU8sR0FBRyxJQUFJO0lBQ2hCO0VBQ0YsQ0FBQyxDQUFDO0VBQ0YsT0FBT0EsT0FBTyxHQUFHckIsT0FBTyxHQUFHVyxNQUFNO0FBQ25DLENBQUM7QUFFRCxPQUFPLFNBQVNZLEtBQUtBLENBQ25CckIsTUFBVyxFQUNYUSxJQUFvQixFQUNwQmMsT0FBWSxFQUNaQyxPQUFZLEVBQ1pDLFFBQWEsRUFDYjtFQUNBLE1BQU1DLFlBQWlCLEdBQUcsQ0FBQyxDQUFDO0VBQzVCLEtBQUssTUFBTUMsQ0FBQyxJQUFJaEIsTUFBTSxDQUFDRSxJQUFJLENBQUNaLE1BQU0sQ0FBQyxFQUFFO0lBQ25DeUIsWUFBWSxDQUFDQyxDQUFDLENBQUMsR0FBR0gsT0FBTyxDQUFDdkIsTUFBTSxDQUFDMEIsQ0FBQyxDQUFDLEVBQUVsQixJQUFJLEVBQUVjLE9BQU8sRUFBRUUsUUFBUSxDQUFDO0VBQy9EO0VBQ0EsT0FBT0MsWUFBWTtBQUNyQiJ9